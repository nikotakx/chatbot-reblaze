{"files":[{"id":3,"path":"introduction-to-reblaze.md","content":"---\ndescription: 'Product overview, architecture, and how it works'\n---\n\n# Introduction to Reblaze\n\n## Welcome!\n\nReblaze Technologies offers an all-in-one web security platform. It includes a next-gen Web Application Firewall \\(WAF\\), full-scope autoscaling Denial of Service \\(DoS\\)/Distributed Denial of Service \\(DDoS\\) protection, advanced bot management, real-time traffic monitoring & control, full historical logs & analytics, and more. \n\nReblaze is fully integrated with the top-tier public cloud providers \\(AWS, Azure, and GCP\\), and runs on the customer’s clouds of choice. The platform protects web applications, services and microservices, and API endpoints.\n\nThe platform is designed around a no-compromise approach to web security. All customers enjoy comprehensive protection, without having to purchase premium tiers or subscribe to additional services. Each customer receives a dedicated Virtual Private Cloud \\(VPC\\), eliminating multi-tenancy vulnerabilities. For maximum privacy, all traffic data is processed exclusively inside the customers’ clouds. Fine-grained ACLs enable precise traffic regulation. An intuitive web-based management console provides real-time traffic control. Multivariate threat detection, behavioral analysis, and machine learning ensure accurate, adaptive protection. \n\n## Product overview \n\nReblaze deploys as a reverse proxy, geolocated immediately in front of the protected network for minimal latency. As incoming traffic passes through Reblaze, attack traffic is blocked and denied access. The platform's overall architecture is as follows: \n\n![Reblaze Deployment](.gitbook/assets/generic.png)\n\n### Cloud-based web security\n\n* Reblaze deploys a dedicated VPC for each customer: an entire full-stack environment for each protected web platform, deployed immediately and automatically, and running across one or more cloud vendors \\(usually AWS, GCP and Microsoft Azure, although private clouds are supported as well\\).\n* All incoming traffic is routed through the VPC and scrubbed as it passes through. Latency is negligible \\(generally 1.5 milliseconds or less\\). \n* Hostile traffic is blocked before it reaches the protected network. Legitimate traffic has normal access to the requested resources. \n* Attackers cannot reach, or even find, the targeted web platform.\n* Bandwidth, compute, and other resources scale automatically as needed, limited only by the capacity of the global cloud. \n* Remote management ensures minimal obligations \\(of time or expertise\\) from onsite staff.\n\n## Architecture\n\n### Authentication\n\nReblaze supports various methods of authentication such as Basic, Digest, and Kerberos. \\(Note that NTLM cannot work with reverse proxies, and thus Reblaze does not support NTLM sites/applications.\\) \n\n### Processing Within Your Perimeter\n\nWith Reblaze, you can process and scrub your traffic exclusively within _your_ clouds—the clouds you already trust for your other business processes. \n\n### Top-tier Cloud Platforms\n\nReblaze is integrated with, and runs natively on, multiple cloud platforms, including the top-tiers \\(AWS, GCP, and Azure\\). It can run on any combination of clouds, on your choice of accounts \\(Reblaze’s, yours, or a combination of the two\\), and it deploys in minutes. \n\nReblaze deploys slightly differently on each platform, to take full advantage of its inherent capabilities.\n\n### GCP\n\nHere is an example deployment of Reblaze on Google Cloud Platform.\n\n![Reblaze running on GCP](.gitbook/assets/gcp-2.png)\n\nStatic content is served by the CDN. Incoming dynamic requests are directed through Cloud Load Balancing \\(capable of handling millions of requests per second\\) to ensure that the request processing time is minimal and availability will be fully utilized. \n\nRequests are routed through the Auto Scaled instance group of \"Reblazers\" \\(security logic units\\) that will inspect the traffic, and according to their security policies, will bypass, deny, or allow the requests. Rule updates are sent to Cloud Armor, which blocks hostile traffic at the edges.\n\nAll incoming requests and their disposition are displayed in the console admin, and also streamed into Cloud Security Command Center \\(not shown above for lack of space\\).\n\nAll events and requests are recorded in BigQuery, accessible to users at all times via full historical logs. Cloud Machine Learning is used to analyze the data. Reblaze identifies new traffic and behavioral patterns \\(both legitimate and hostile\\), and updates all deployments appropriately. Thus, even as new web threats arise, Reblaze hardens itself against them.\n\nAll Security policies are stored in secure Cloud Storage and constantly synchronized.\n\n### AWS\n\nHere is an example deployment on AWS. The overall traffic flow and processing is similar to that described above for GCP, although it leverages AWS's native capabilities.\n\n![Reblaze running on AWS](.gitbook/assets/aws.png)\n\n### Microsoft Azure\n\nHere is an example deployment on Azure.\n\n![Reblaze running on Azure](.gitbook/assets/azure.png)\n\n","lastUpdated":"2025-03-01T09:49:50.841Z","hasImages":true,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/introduction-to-reblaze.md"},{"id":6,"path":"product-walkthrough/reblaze-traffic/traffic-concepts.md","content":"---\ndescription: How Reblaze reports on the requests it receives\n---\n\n# Traffic Concepts\n\nThe Reblaze [Dashboard](dashboard.md) and [View Log](view-log.md) provide intuitive yet very powerful ways of viewing your traffic.\n\nWithin those sections, your traffic data is reported in terms of several statistics: \n\n| Statistic | Comment |\n| :--- | :--- |\n| **Hits** | Total incoming requests |\n| **Humans** | Requests originating from humans. |\n| **Bots** | Requests originating from traffic sources not \\(yet\\) verified to be human. Most of the requestors will be bots, but some will not be. More on this below. |\n| **Passed** | Requests accepted by Reblaze and passed upstream to the **origin** \\(i.e., the web server, API endpoint, etc.\\). |\n| **Blocks** | Requests deemed to be hostile, and blocked. |\n| **Challenges** | Requests that were challenged. The [challenge process](traffic-concepts.md#the-challenge-process) is an important part of Reblaze's traffic processing, as seen below. |\n\nThe Dashboard provides a variety of ways to view your traffic. Most of them do not include all of the above metrics in the same view \\(as in the first screenshot below\\), but some do \\(as in the second screenshot below\\).\n\n![This graph shows Hits, Challenges, and Blocked](../../.gitbook/assets/screenshot-2020-01-02-10.55.19.png)\n\n![The Top Sessions view shows all the metrics](../../.gitbook/assets/screenshot-2020-01-02-10.59.10.png)\n\nReblaze processes \"web\" requests \\(http/s traffic for a web site or application\\) differently than API requests from a mobile/native application. Mobile applications have different methods of client authentication, as discussed here: [Mobile SDK](../../using-the-product/reblaze-api-1/mobile-sdk.md). \n\nThe discussion below is for sites and web applications.\n\n## The Challenge Process\n\nMost of the Reblaze interface focuses on configuration for:\n\n* The detection and mitigation of hostile requests.\n* The detection and mitigation of hostile behavior of requestors.\n\nThe challenge process is different. It is built into Reblaze, and provides a third approach to security. It mitigates threats based on the requestor's identity and environment.\n\nWhen Reblaze receives the first request from a previously unknown traffic source \\(below described as the \"user\"\\), this is the typical process that is followed.\n\n1. **Reblaze challenges the user's browsing environment.** Reblaze uses a variety of proprietary, multi-faceted techniques to verify that this requestor is a human using a browser, instead of a bot using a headless browser or emulator. \\(This topic is discussed in some depth in this white paper: [2019 State of Bot Protection](https://www.reblaze.com/resources/white-papers/2019-state-bot-protection/).\\)\n2. **If the challenge is not passed, the request is suspected to be a bot, and another challenge is issued.** This process continues until a challenge is passed, or a threshold is reached \\(e.g., via a Dynamic Rule\\) to ban the requestor. \n3. **If the challenge is passed, the browser's session is authenticated**, and the browser receives cookies from Reblaze.\n4. **The browser then automatically resubmits the original request**, but this time, the cookies are included. The user is granted access to the requested URL, resources, etc.\n5. **Subsequent requests will also include the cookies,** and thus, they are not challenged.\n\nThis process happens quickly \\(in a few milliseconds\\), and is **invisible** to the user.  \n\n{% hint style=\"info\" %}\nAs noted above, this is the \"typical\" process that occurs in normal use. There are a variety of situations in which it might not be followed.  For example, sometimes Reblaze is configured to whitelist certain IP addresses, and not to challenge them. \n\nThe discussion below will be based on the typical process described above.\n{% endhint %}\n\n## How Requests Are Reflected in Reblaze's Statistics\n\nThe process described above will result in the following statistics being incremented.\n\nFor each challenge that was not passed:\n\n* **Hits**\n* **Challenge**\n* **Bots**\n\nIf the challenge was passed:\n\n* **Hits** \n* **Challenge**\n* **Bots** \\(see explanation below\\)\n* **Hits** \\(incremented a second time for the post-challenge resubmission of the request\\)\n* **Passed**\n* **Humans**\n\n## Counting Bots\n\n{% hint style=\"info\" %}\n**Within Reblaze, a request that does not have authenticating cookies is counted as a bot.**\n{% endhint %}\n\nAs a result, the Bot count can sometimes be incremented even when the visitors are humans. Examples:\n\n* When a human user visits a Reblaze-protected site for the first time, **the first request does not yet have the authenticating cookies**. \n* Static files \\(images, etc.\\) are often exempted from challenges for performance reasons. Direct requests for those URLs from a new visitor will not have cookies.\n* Sometimes, trusted IPs are whitelisted and exempted from challenges. They never receive authenticating cookies.\n\nTherefore, although _most_ of the Bot count represents non-human requests to your web application, the Bot metric is not an _exact_ count of this. \n\n## Relationships of Traffic Metrics\n\nWhen working with Reblaze's traffic statistics, the following relationships can be helpful.\n\n### **Hits = Passed + Blocked + Challenges**\n\n### **Hits = Humans + Bots**\n\n## Active Challenges versus Passive Challenges\n\nThe process described on this page is the **active** challenge process. Out of the box, this is the challenge process that Reblaze uses.\n\n{% hint style=\"info\" %}\n**We recommend that whenever possible, customers also enable** _**passive**_ **challenges.** \n{% endhint %}\n\nPassive challenges have three primary benefits:\n\n* **They enable Biometric Bot Detection**: a much more powerful means of identifying automated traffic, and an important part of Reblaze's behavioral analysis.\n* **In some situations, active challenges can interfere with certain metrics** such as those provided by Google Analytics. \\(The initial referrer information is lost.\\) If this is a problem, active challenges can be disabled. In this situation, passive challenges can provide effective bot protection instead. \n* **When caching is being done by a CDN**, active challenges will not occur for pages being served from the cache. Passive challenges are necessary for Reblaze to perform bot detection in this situation.\n\n{% hint style=\"info\" %}\n**If possible, we recommend that customers use both active and passive challenges.**\n{% endhint %}\n\nTo learn more about passive challenges, go here: [Enabling passive challenges. ](../../using-the-product/best-practices/enabling-passive-challenges.md)\n\n\n\n","lastUpdated":"2025-03-01T09:50:08.751Z","hasImages":true,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/product-walkthrough/reblaze-traffic/traffic-concepts.md"},{"id":7,"path":"product-walkthrough/reblaze-traffic/view-log.md","content":"---\ndescription: Revealing the composition and details of your traffic\n---\n\n# View Log\n\nThis page provides the ability to review and analyze the most recent traffic, up to and including real time. At first glance, you'll see the origin country, IP address, HTTP message type, the targeted location, time stamp, and status code. \n\nIf a security event occurs, this page will allow you to quickly find its root cause.\n\nOn the top right of the page, you can select the range of requests displayed: from the most recent 200 events up to the most recent 2500. Choose the desired range \\(200, 500, 1000, 1500, 2000, or 2500\\) and then click on the checkmark to set the display. \n\n{% hint style=\"info\" %}\nIn the screenshots below, IP addresses are censored for privacy reasons. \n{% endhint %}\n\n![ View Log Screen](../../.gitbook/assets/image%20%2883%29.png)\n\n## Analyze Traffic Log\n\nThe main tool in this section is the Query box for filtering the display; this is quite similar to the one on the Dashboard. It allows you to filter the display and see only the data you wish to analyze. For a full explanation of how to use it, [click here](../../using-the-product/best-practices/reblaze-filter.md). \n\n{% hint style=\"info\" %}\nThe Query box allows you to filter and display specific requests and their details. To show the results graphically instead, you can copy the filter string and paste it into the Query box on the [Dashboard](dashboard.md).\n{% endhint %}\n\nAt the top right of the screen, you can choose the application you want to analyze. The drop-down menu allows you to search for and choose your desired application. \n\n![Analyze Traffic Log: Application Drop-down and Filter Box](https://lh5.googleusercontent.com/qyBHNl9vWfym1qQ2B4yWfjpXlPAH8xG3odpqFniO85aTbG2q3mq6bmKJR86j8nInpExtPWE19haS6Ph8kZSDucpwOFT8pcIhL8Q2wfwjDHlrdR_klTYU3k3BIyxaeLF33TbP9a3x)\n\nNext to the Query box, you'll see several buttons. \n\n* The search icon is for applying the requested filters on the log. \\(Or, just hit \"Enter\" on the keyboard after typing your query.\\)\n* The calendar button allows you to specify a certain date or period of time.\n* The Search History button displays your recent searches, so you can re-run them without having to enter them completely from scratch.\n* Export to CSV creates a text-based spreadsheet file.\n* The Help button opens a display with a quick-reference guide to Query box operator syntax.\n* The Clear button removes your current Query box entries.\n\n## Log Structure\n\n![Example log entries](../../.gitbook/assets/three-log-entries.png)\n\nLog entries are color-coded depending on their type.\n\n* **Passed requests:** Black text on a white background.\n* **Blocked by Reblaze:** Red text on a red background.\n* **Blocked by origin** **\\(i.e., the upstream server\\):** Red text on a white background.\n* **Challenge:** Brown text on a yellow background.\n\nClicking on any log entry will display its details: \n\n![Log Entry Example](../../.gitbook/assets/image%20%2828%29.png)\n\nThis will reveal:\n\n* The URL that was requested\n* The user agent\n* Optional additional information \\(not shown in the example above\\), depending on the request. Example: the referrer.\n* A row of colored labels.\n\nIn the example above, the colored labels contain the following information \\(from left to right\\):\n\n1. **HTTP Request Method** \\(GET / POST / PUT...\\)\n2. **HTTP Version**\n3. **HTTP Response code, and which server sent the code:** either the upstream server \\(noted as \"Origin,\" as in the example above\\), or the Reblaze proxy.\n4. **Resource** that was requested \\(JPG / PNG / HTML / JS, etc.\\)\n5. **Origin Country and Country Initials**\n6. **Block reason:** The reason, if any, that the request was denied. Standard reasons are listed in the [Reblaze WAF Signatures](../../reference-information-1/reblaze-signatures.md) list, while others are constructed dynamically \\(e.g., from a rate limit\\). A hyphen \\(\"-\", as in the example above\\) means that the request was not denied. \n7. **IP Classification:** Whether the requestor is using an IP from a cloud provider, VPN, TOR, etc. In the example above, the requestor is using a cloud provider. Note that this does not indicate that the request was blocked for this reason. If the current Profile had included an ACL to block cloud users, then the Block reason would say \"acl:cloud\", and then this \"Cloud\" notification would appear after it for the IP Classification.\n8. **Origin IP address** \\(censored in the example above\\)\n9. **Autonomous System Number** \\(organization/ISP/etc.\\)\n\nTo see full log details for an entry, click on the small magnifier on the right side of the log![](https://lh3.googleusercontent.com/tzO0G5inRW4J8sB9dkE3gKj_d6iv317KwGLKwIStN1AjjzDykJYL4RPsBZQB2xOwGGRjMlsCClGTH51z3Nv6SPGFrXr39uDM-Ixy79se7ekBiRagc1Jj42OQKro9LEKvT2de3YBb). This will show all the headers, cookies, and session details. \n\n![Challenged Request Example](../../.gitbook/assets/image%20%2816%29.png)\n\nThe example above shows a request that was answered with a challenge. It came from a known cloud provider, by curl, to www.example.com.  \n\n![Blocked Request example](../../.gitbook/assets/blocked-request.png)\n\nThe above screenshot shows a log entry for a request that was blocked. Note that the Block reason is \"Generic Attack \\[ref 22400000\\]\". The \"ref\" number is a [Reblaze Signature reference ID](../../reference-information-1/reblaze-signatures.md). \n\n## Examples for Log Filters\n\n### **Example 1**\n\nHow to search for one IP \\(censored in the screenshot below\\), only showing requests with a GET method during a specific time frame.\n\n![Example 1 Screen](../../.gitbook/assets/image%20%28105%29.png)\n\n### **Example 2**\n\nUsing this regex syntax: \n\n`status:[4]\\d\\d`\n\nProvides all status codes for 4xx. \n\n![Example 2 Screen](../../.gitbook/assets/image%20%2856%29.png)\n\n### **Example 3**\n\nHow to display all requests from a certain country, for \"EXE\" files, which produced error code 403. \n\n![Example 3 Screen](../../.gitbook/assets/image%20%2853%29.png)\n\n{% hint style=\"info\" %}\nA full explanation of filter syntax, a listing of operators, and tips for quickly building queries is found here: [Using the Reblaze Query Box](../../using-the-product/best-practices/reblaze-filter.md). \n{% endhint %}\n\n## Using the Log\n\nThe View Log page has many uses, and it will allow you to learn a lot about your traffic. \n\nThis page is a powerful tool for traffic control, and is especially useful when you are first starting to use Reblaze. By revealing the composition of your traffic, it can help you decide which requests you should begin blocking.\n\n","lastUpdated":"2025-03-01T09:50:22.223Z","hasImages":true,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/product-walkthrough/reblaze-traffic/view-log.md"},{"id":9,"path":"product-walkthrough/security/args-analysis.md","content":"---\ndescription: Analyzing the values of arguments within incoming requests\n---\n\n# Args Analysis\n\nThe Arguments Analysis feature has two primary functions:\n\n1. **Examining incoming requests for specific whitelisted characters** in specific arguments \\(i.e., parameters in the URL query string or within the request body\\). Alphanumeric characters are allowed by default; all others must be allowed via a whitelist. When all characters in all arguments are found in the respective whitelists, the request is allowed, and no further inspection or filtering by the WAF is performed. If one or more characters are encountered that are not whitelisted, the request is either forwarded to the WAF for further inspection \\(when **Inspect Unknown** mode is enabled\\), or the request is denied \\(when **Strict Whitelist** mode is enabled\\). \n2. **Automatically updating the whitelists:** As non-whitelisted characters are encountered, they can be added to the argument whitelists, depending on the **Adaptive Mode** selected. \n\nThe first function is often used in complicated sites; it offers a positive-security approach for analyzing traffic. Arg Analysis makes it easy to whitelist values that should be allowed in various request parameters. Another possible use is to bypass specific parameters that are too long for the WAF to efficiently process, or where WAF inspection is not relevant.\n\nThe second function \\(i.e., automatically updating whitelists\\) is less applicable for most deployments, and in most situations, is **not encouraged**. If Args Analysis is used incorrectly, large whitelists can be inadvertently built that will match most or all incoming requests. Thus, most or all incoming requests will bypass the WAF's traffic inspection and be sent directly upstream. In effect, this will disable Reblaze's traffic scrubbing. Therefore, **we discourage the use of this function unless you are sure you need it, and you fully understand how it works.**\n\nFor both functions, an argument list must be built. \n\n## Building an Argument List\n\nInitially, this section will look like this:\n\n![](../../.gitbook/assets/screenshot-2019-12-26-12.04.27.png)\n\nNote the pulldown list on the right, which specifies the domain that you are currently administering.\n\n### Automatic Argument Learning\n\nEach time the system performs an analysis, **arguments that were not previously known will be learned and added to the argument list, automatically** \\(even in Supervised mode\\). The new character whitelists will consist of those characters that were encountered with each argument.\n\n{% hint style=\"info\" %}\nThis can have some important and potentially nonintuitive consequences. See the warning below in the discussion of [conflicted arguments](args-analysis.md#processing-of-unmatched-characters).\n{% endhint %}\n\n### Manual Argument Addition\n\nIn the top right menu you will see this button: ![](https://lh3.googleusercontent.com/z82CLwkZTCisQE0KAkJ3sAB0OQ_s-gZ1vi0u2wFX6txQ_5a9oZhwJsrhrUUIwrX5pbKWaH_wmADvQ_KzvnrIMR_fZwatPsMliHqrXEuYJIEud87HNdcnVUevgE8GEoZCKPRK_sm6). Clicking on it will open the main menu**:**\n\n![](../../.gitbook/assets/image%20%2875%29.png)\n\n**Upload arguments file:** The system allows you to upload a HAR file \\(that can be recorded using the browser’s dev tool\\). From the HAR file, the system will learn all the arguments and their values.\n\n![](../../.gitbook/assets/image%20%2851%29.png)\n\n**Creating an argument manually**: You can also create individual arguments by selecting \"New Argument,\" after which this dialog will appear:\n\n![](../../.gitbook/assets/image%20%2850%29.png)\n\n| Field Name | Description |  |\n| :--- | :--- | :--- |\n| **Argument Name** | The parameter in the query string or request body |  |\n| **Argument Characters** | A regex pattern to match against the values specified for the Argument Name. This is a whitelist of allowable characters. |  |\n| **Max Length** | Maximum allowed length of the argument, in characters |  |\n\nWhen an argument is encountered in a query string or request body, its Argument Name is sought within the Args list for the relevant domain. If not found, it is added to the list, as noted previously.\n\nIf found, its value is analyzed. If each character within it is found in its corresponding Argument Characters, then this argument is passed.\n\nIf every argument in a query string or request body is passed, then the entire request is passed. It is sent to the origin \\(the upstream server\\), without being subjected to further inspection or filtering by Reblaze.\n\nif the request is not passed, further processing occurs. See [Handling Requests with Unmatched Characters](args-analysis.md#handling-requests-with-unmatched-characters), below.\n\n## Argument List Administration\n\nIn addition to the \"New Argument\" and \"Upload Arguments File\" options, the pulldown menu also offers additional capabilities.\n\n**Download as JSON -** When this option is selected, the system will start a browser download of a JSON file that contains all the arguments and their values.\n\n**Delete App Args -** Removes all the arguments in the current domain.\n\n**Analyze Now -** Manually triggers the analysis process \\(described below\\), starting from the previous day.\n\n**Learning Resources**  - Displays the list of all [ACL Policies](profiles/acl-policies.md) defined in your planet, except for the default ones supplied by Reblaze. Example:\n\n![](../../.gitbook/assets/image%20%28111%29.png)\n\nBy default, Args Analysis learns from every request. The Learning Resources feature allows you to filter this, so that it only learns from specific requests.\n\nWhen you select an ACL Policy from this list, Args Analysis will be limited to the requests which match that Policy. \\(If the ACL Policy happens to be empty, then the most recent 100,000 requests will be analyzed, or the most recent 24 hours' worth of data, whichever limit is reached first.\\)\n\nIf the selected ACL Policy has an Operation of Allow, then Args Analysis will analyze all the requests that were not blocked by the WAF or other ACL Policies. If the Policy is instead set to Bypass, then Args Analysis will also learn from blocked requests. \\(This can be useful when in Report-Only mode\\).\n\n**Show Regex/Characters -** Toggle the display of all values on this page in regex, and then back into characters. Note when showing regex, alphanumeric characters are also explicitly included in the whitelist. In character mode, the Reblaze interface does not display these; the user should understand that all alphanumerics are whitelisted by default.\n\n**Refresh and Discard Changes -** This allows you to discard all the changes you made to the arguments table.\n\n**Save Changes -** When making any changes to the arguments table, you must save them afterward. This includes any modified or accepted conflicts in the system \\(more on these below\\).\n\n## Once Argument Lists Are Built\n\nIn daily operation, Reblaze analyzes arguments in incoming requests. When they match the character whitelists, the requests are allowed, as described above.\n\nAdditionally, Reblaze goes through the traffic logs, analyzing and mapping all arguments received since the last analysis. This occurs every night around 3am UTC.\n\nThe system creates a list of argument characters that were encountered in requests, but were not in the whitelists. \n\nThen in this Args Analysis section of the interface, Reblaze displays the current whitelists as follows:\n\n* **Unchanged Arguments**: This is at the bottom of the screen. It shows all the arguments for which Reblaze did not encounter any new \\(i.e., non-whitelisted\\) characters.\n* **Conflicted Arguments**: This shows the results of the most recent analysis: all the arguments for which Reblaze encountered characters that were not in the whitelists. \n\nHere you have the opportunity to update the whitelists, accepting some or all of the proposed updates listed in the Conflicted Arguments section.\n\nThe manner in which these updates are accepted or rejected will depend on the **New Args Adaptive Mode**.\n\n## New Args Adaptive Mode \n\nThere are four possible modes: Automatic, Supervised, Locked, and Preview.\n\n### **Automatic**\n\nThe system will discover and deploy new args without any human intervention. Everything occurs automatically.\n\n### Supervised\n\nThe system will discover new args, but it will not deploy them. Instead, it will present them as Conflicted Arguments, and await approval or rejection by a human admin.\n\n### Locked\n\nThe system will not discover any new args. All configuration changes must be done manually.\n\n### Preview\n\nThe system will discover new args, but this is for informative purposes only. Traffic processing is not affected.\n\n{% hint style=\"warning\" %}\nIn the interface, there is a help section that lists the first mode as  **Automatic \\(Recommended\\)**. This is deprecated; **we no longer recommend Automatic mode** for most customers. As mentioned previously, this introduces the risk that erroneously large whitelists will be built. For most customer deployments, **we now recommend Supervised or Locked mode**.\n{% endhint %}\n\n## Handling Requests with Unmatched Characters\n\nFor each of the first 3 operation modes \\(Automatic, Supervised, and Locked\\), another setting is available:\n\n![](../../.gitbook/assets/screenshot-2020-01-03-20.11.05.png)\n\nThis defines Reblaze's behavior when non-whitelisted characters are encountered for known args.\n\n#### Inspect Unknown\n\nA request that contains an argument that contains one or more non-whitelisted characters will be forwarded to the WAF for inspection and potential filtering.\n\n#### Strict Whitelist\n\nA request that contains an argument that contains one or more non-whitelisted characters will be blocked.\n\nAfter the request is processed, this argument is added to the list of **Conflicted Arguments**.\n\n## **Conflicted Arguments**\n\nWhen new \\(non-whitelisted\\) characters are encountered, the arguments in which they were found are listed in the interface as Conflicted Arguments. Reblaze suggests updates \\(the New Values\\) for each argument's whitelist, and awaits the user's decisions.\n\n![](../../.gitbook/assets/image%20%2820%29.png)\n\nEvery time an analysis is performed, the previous list of Conflicted Arguments is discarded, and a new one generated. Thus, the interface displays only the Conflicted Arguments that were found in the most recent analysis. \n\n{% hint style=\"info\" %}\nSometimes, argument names contain a designation for an ampersand \\(\"amp;\"\\), while others do not. This results from differences in decoding URLs versus arguments found in the body. It doesn't affect anything within the interface or its usage. \n{% endhint %}\n\nEach Conflicted Argument contains a set of New Values. These are updates that Reblaze is proposing to make. There are three available actions: \n\n* Deleting \n* Modifying\n* Accepting\n\n**Deleting -** selecting the Trash icon will remove the Conflicted Argument from the list. **This can produce unintended consequences: see warning below.**\n\n**Modifying -** You can edit the New Values. For the character field, only valid regex will be accepted.\n\n**Accepting** - Clicking on the green Accept Conflicts button will accept all the Conflicted Arguments, updating the args list to the New Values.\n\n{% hint style=\"danger\" %}\nIt might appear that the \"Delete\" command \\(the trash can button\\) is merely a method of resolving the Conflict by rejecting the New Values and retaining the Current Values. **This is incorrect.** \n\nWhen an argument is deleted from the list of Conflicted Arguments, this does not remove the _conflict_, it removes the _argument_. **This has two consequences, both of which might not be intended by the user:**\n\n1. Until the next analysis is run, this argument will be unknown to Reblaze. Therefore, every incoming request that contains it will either be sent to the WAF for further inspection \\(when **Inspect Unknown** mode is enabled\\), or it will be denied \\(when **Strict Whitelist** mode is enabled\\).\n2. When the next analysis is performed, Reblaze will learn the \"new\" argument, and create a new whitelist containing whatever characters were encountered within it. It's possible that this whitelist will contain some or all of the characters that previously caused that argument to appear as Conflicted.\n\nThe second point is especially important. If the user thinks that \"Delete\" will reject the New Values, **the opposite can actually occur**. When the argument is deleted and subsequently re-added, its character whitelist might automatically contain the same characters that the user was trying to reject previously.\n\n**The correct way of resolving a Conflict while retaining the same whitelist is to edit the New Values to match the Current Values**, before selecting Accept Conflicts**.** \n\nOr, the user can do nothing, and merely leave the Conflict unresolved in the interface. This will leave the argument's whitelist unchanged.  \n{% endhint %}\n\n## Unchanged Arguments\n\nAt the bottom of the screen is a list of Unchanged Arguments.\n\n![](../../.gitbook/assets/image%20%2847%29.png)\n\nThis shows the arguments for which Reblaze has not encountered any non-whitelisted characters. \n\nYou can edit these arguments if desired, or even delete them \\(by clicking on the trash icon to the right—but **see the warning above about the potential consequences of deleting arguments**\\).\n\n","lastUpdated":"2025-03-01T09:50:31.870Z","hasImages":true,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/product-walkthrough/security/args-analysis.md"},{"id":11,"path":"product-walkthrough/security/dynamic-rules.md","content":"---\ndescription: Security rules with time-based thresholds\n---\n\n# Dynamic Rules\n\n## Overview\n\nThe Dynamic Rules section defines security rulesets that evaluate various criteria over time. When requestors commit activities that exceed defined thresholds, they can be banned, or merely reported on within the interface. \n\nNote that **Dynamic Rules do not block requests; they ban the** _**sources**_ **of requests**. Individual incoming requests are blocked for reasons defined elsewhere, e.g., in [ACL Policies](profiles/acl-policies.md). \n\nWhen requests are blocked, or display other hostile characteristics, Dynamic Rules are used to monitor their sources. If the sources continue their hostile activities, they can be banned. A ban means that **all subsequent requests from that source will be blocked for a configured length of time**. \n\n![Dynamic Rules Section](../../.gitbook/assets/image%20%2884%29.png)\n\nThe interface displays the Dynamic Rules that are currently defined. At the top are the default rules supplied by Reblaze, marked with the Reblaze icon. \n\n{% hint style=\"info\" %}\nThe default rules from Reblaze are useful for most customer deployments. If you wish to edit them, one approach is to preserve the originals by duplicating them, deactivating them, and then editing and using the copies.\n{% endhint %}\n\n## Dynamic Rules Administration\n\nTo edit a rule, click on its name, and its parameters will appear below.\n\nTo disable or enable a rule, click on the Activation trigger: ![](../../.gitbook/assets/activation-trigger.png) \n\nTo delete a rule, click on the small button at the end of its listing: ![](../../.gitbook/assets/vertical-dots.png)That button will display options to Delete this rule, or to Duplicate it. \\(Sometimes, it is faster to Duplicate a rule and edit the copy than to create a new one from scratch.\\)\n\n### Dynamic Rules section menu\n\nAt the top right screen, this larger button is shown :![](https://lh3.googleusercontent.com/RGur_xF9YZwCFGsIugGch8ZKlIzTyliXJEcErYqp4ALWJpJT5KqepJ6PnC-YJGfsc9c3lkn1_81pClTPTOTSKFTm2oFH1Sr1v2vneumJadmdtlz76pFriGV25iGO2WVYGEnjtLsx) . Clicking on it will cause the section menu to appear:\n\n![](https://lh6.googleusercontent.com/LLHCy3FIoaYtvxKvClOKlAm3jyrmqkagMTeHPISUmUTO5LwcSIoDoor1jgbfcm6f7YfvmQgcktQ_XLY1-Eo8-I3Fwyxs8sMmwInJpZyehByXb1SF4Tyz1xDEs_eLgjb-iKxaSlIs)\n\nIt provides these abilities:\n\n| Name | Description |\n| :--- | :--- |\n| **Add new rule** | Creates a new Dynamic Rule. |\n| **Activate global simulation mode** | The rules currently set to \"Ban\" will be changed to “Simulated Ban”. This is useful for testing. See also [How to Test Dynamic Rules](dynamic-rules.md#how-to-test-dynamic-rules), below. |\n| **Test All Rules** | Explained in [How to Test Dynamic Rules](dynamic-rules.md#how-to-test-dynamic-rules), below.  |\n| **Set new TTL globally** | Sets TTL \\(described below in [Dynamic Rules settings](dynamic-rules.md#dynamic-rule-settings)\\) for all Dynamic Rules. |\n| **Help** | Brings up a help screen describing the settings for a rule. See also [Dynamic Rules settings](dynamic-rules.md#dynamic-rule-settings)**,** below. |\n| **Refresh and discard changes** | Discards all changes that you have made, and refreshes the display to show the current settings within the system.  |\n| **Save Changes** | Saves all changes that have been made. Note that this makes your changes go live immediately. Unlike other administrative activities within Reblaze, when editing Dynamic Rules it is not necessary to Publish Changes after saving them. |\n\nThe interface also provides a search box, which can be used to find a rule according to a string within its name.\n\n![Search example for &quot;Block&quot;](../../.gitbook/assets/image%20%2823%29.png)\n\n## Creating Dynamic Rules\n\nTo create a Dynamic Rule, click on \"Add new rule\" in the Dynamic Rules section menu and provide the Rule Name. \n\n![Newly-created Dynamic Rule, disabled by default](../../.gitbook/assets/image%20%28103%29.png)\n\n{% hint style=\"info\" %}\nNewly-created Rules are always disabled, and must be enabled before they will be active. \n{% endhint %}\n\n## Dynamic Rule settings\n\nEach Dynamic Rule contains the following parameters:\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align:left\">Field Name</th>\n      <th style=\"text-align:left\">Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align:left\"><b>Description</b>\n      </td>\n      <td style=\"text-align:left\">Your description of the rule. This is useful for internal purposes, e.g.,\n        noting why a particular rule is necessary.</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\"><b>Target</b>\n      </td>\n      <td style=\"text-align:left\">Defines the source of aggregated requests which will be evaluated, and\n        the recipient of the specified action if a violation occurs. The most commonly-used\n        target is IP. Other options are Cookies, Country, ASN, Planet, Request\n        Body, Request Header, or User Agent. (&quot;Planet&quot; means &quot;all\n        requests.&quot; This is used in the Global Request Count default rule.)</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\"><b>Alert</b>\n      </td>\n      <td style=\"text-align:left\">If a notification should be sent when a violation of this rule occurs.</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\"><b>Mode</b>\n      </td>\n      <td style=\"text-align:left\">\n        <p>Defines the action that will happen when a requestor exceeds the specified\n          Threshold during the Period.</p>\n        <p></p>\n        <p><b>Ban </b>will block the violator (available for IP, Cookie, Request\n          Body, Request Header, Country, and ASN), and will add the violator to the\n          <a\n          href=\"quarantined.md#banlist\">Quarantined Banlist</a>.</p>\n        <p></p>\n        <p><b>Simulated Ban </b>does not actively ban the violator; it only adds\n          the violator to the <a href=\"quarantined.md#simulation-banlist\">Quarantined Simulation Banlist</a>.</p>\n        <p></p>\n        <p><b>Report Only</b> does not actively ban the violator. If this rule has\n          been included within a <a href=\"../settings/planet-overview.md#notification-and-alert-settings\">Notification Group</a>,\n          then the defined notifications will be sent.</p>\n      </td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\"><b>Threshold</b>\n      </td>\n      <td style=\"text-align:left\">The maximum allowable number of http/s requests by the Target in the specified\n        Period.</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\"><b>Period</b>\n      </td>\n      <td style=\"text-align:left\">The time period within which requests will be counted, and if the Threshold\n        is exceeded, will trigger the defined action. <b>Note that each Period should be 3 minutes or longer. </b>(A\n        few example screenshots in this Manual have shorter periods. These were\n        taken from a demo site, and are for illustration only. Periods in a production\n        deployment should be 3 minutes or more.)</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\"><b>TTL</b>\n      </td>\n      <td style=\"text-align:left\">Time To Live: If the violator is banned, this is the length of the ban.\n        If the violation is merely reported (as in Report Only mode), this is the\n        amount of time before a new report can be issued on this violation.</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\"><b>Monitor</b>\n      </td>\n      <td style=\"text-align:left\">A list of matching conditions. If a request matches <b>all</b> the conditions\n        in this list, it will be included in the aggregated count toward a potential\n        violation. Multiple conditions are ANDed together. See further discussion\n        below.</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\"><b>Ignore</b>\n      </td>\n      <td style=\"text-align:left\">A list of matching conditions. If a request matches <b>any</b> of the conditions\n        on this list, it will be ignored, and will not be included in the count\n        toward a potential violation. Multiple conditions are ORed together. See\n        further discussion below.</td>\n    </tr>\n  </tbody>\n</table>{% hint style=\"info\" %}\nNote that it is theoretically possible to construct a Dynamic Rule so that a specific request can match **both** the Monitor and Ignored conditions simultaneously. \\(This usually indicates a mistake in constructing the rule.\\) If a request ever matches both condition sets at the same time, nothing happens. \n{% endhint %}\n\n## **Matching Conditions for Dynamic Rules**\n\nThe monitor list includes many useful arguments for identifying relevant traffic. \n\n{% hint style=\"info\" %}\nSome of the matches rely on the results of [ACL Policies](profiles/acl-policies.md). For example, an **Anonymizer** value of \"true\" will match a request that was denied by the \"Deny Anonymous Proxies\" ACL Policy.\n{% endhint %}\n\n| Field Name | Description |\n| :--- | :--- |\n| **Block Reason** | The reason for the traffic being blocked. See **Defining Block Reasons** below for a full explanation.  |\n| **Blocked** | True if the request was blocked, otherwise False.  |\n| **Cookie** | An exact match of the cookie name and value.  |\n| **Domain Name** | Which domain names should be monitored. |\n| **File Extension** | Which file extensions should be monitored. Example: \\(exe\\|jpg\\|tar\\) |\n| **City** | The abbreviation of the country. Example: \"US\" for \"United States.\" |\n| **Country** | Country name. |\n| **Host Name** | Any name that was configured as Host. |\n| **Reblazer ID** | ID of the Reblaze proxy  |\n| **Anonymizer** | Boolean value \\(True/False\\) |\n| **Cloud** | Boolean value \\(True/False\\) |\n| **Human** | Boolean value \\(True/False\\) |\n| **Proxy** | Boolean value \\(True/False\\). \\[This is different than the Anonymizer field above. It uses an internal value of Reblaze that is not otherwise exposed in the interface.\\] |\n| **TOR** | Boolean value \\(True/False\\) |\n| **VPN** | Boolean Value \\(True/False\\) |\n| **Method** | HTTP method type \\(e.g., GET, POST, etc.\\).  |\n| **ASN** | The ASN Value. |\n| **Referer** | The Referer value. |\n| **IP** | The IP Address. |\n| **Complete URL** | URL with the query string. |\n| **URI** | URI |\n| **Request Body** | Text boxes will appear for \"Name\" and \"Value\" parameters. Both can be regex. |\n| **Request**  **Headers**  | Text boxes will appear for \"Name\" and \"Value\" parameters. Both can be regex. |\n| **Response Status** | HTTP response code \\(200, 404 etc.\\). |\n| **User Agent** | The request's user agent name. |\n\n{% hint style=\"info\" %}\nScrolling down the list will reveal additional fields. These tend to be used by more advanced users. \n{% endhint %}\n\nThe video below sums it all up:\n\n{% embed url=\"https://youtu.be/xWE7jKLeEPg\" %}\n\n### **Defining Block Reasons**\n\nThe Block Reason field allows you to construct a Dynamic Rule that will be triggered when requests are blocked for specific reasons. When this is included in a Rule, Reblaze will compare its value to the reasons that a request was blocked.\n\nThe comparison is based on a \"contains\" substring search, and is case-insensitive. Therefore, when a request is blocked for `Over-capacity`, Block Reason values of `capacity`, `over-capacity`, and `Over-capacity` will all match.\n\nThere can be multiple Block Reasons OR'd together, e.g.: `autoban|over-capacity`. \n\nThere are several ways to obtain values for constructing Block Reasons. The first is the list of standard [Reblaze WAF signatures](../../reference-information-1/reblaze-signatures.md) \\(example: `Autoban/etc.`\\). Other possible values are custom, created dynamically by Reblaze as the result of user configuration. Example: `Rate limit 2/1s` . \n\nIn both cases, recent values can be obtained from individual events in the [View Log](../reblaze-traffic/view-log.md), or from the Signatures tab on the [Dashboard](../reblaze-traffic/dashboard.md) page.\n\n![The Signatures tab shows the Block Reasons for recent requests.](../../.gitbook/assets/screenshot-2020-01-03-14.22.34.png)\n\n## **How to Test Dynamic Rules**\n\nAfter creating or modifying Dynamic Rules, it is recommended that you test them to ensure that they are behaving as expected.\n\nYou can safely test Dynamic Rules against actual traffic data, without actually banning any traffic sources. This is done by running the rules in **Simulated Ban** mode.\n\nThere are two ways to do this: testing all rules globally \\(most useful when setting up a new planet\\), or testing individual rules \\(useful in daily operation\\).\n\n### Testing all rules globally\n\nSelect **Activate global simulation mode** from the section menu, which will change all Dynamic Rules that were set to **Ban** to **Simulated Ban**. \n\nThis means that requestors who violate Dynamic Rules will not be banned; instead, they will appear within the [Simulation Ban List](quarantined.md#simulation-banlist) in the [Quarantined](quarantined.md) section. You can observe the requestors who appear there, and evaluate if the Dynamic Rules are identifying the requestors you expected. \n\n{% hint style=\"warning\" %}\nNote that during this process, **all Dynamic Rule traffic scrubbing will be disabled**. Therefore, it is most useful during the initial setup of a new planet.\n{% endhint %}\n\n### Testing individual rules\n\nTo test individual rules, set each one to **Simulated Ban** mode. Save and Publish your changes. Then from the section menu, choose **Test All Rules.**\n\nThis will evaluate the current set of Dynamic Rules against the most recent traffic data. **Example**: a rule with a Period of five minutes will be evaluated against the requests that were received in the last five minutes. \n\nYou can compare each rule's performance with what you expected. Once you are satisfied with a rule's performance, you can make it active by changing its mode to **Ban**. \n\nNote that you can accomplish a similar result by observing the Simulated Ban list in the Quarantined section. However, testing is faster using **Test All Rules**: you get the results immediately, instead of having to wait for a full Period to see how a Rule performed.\n\n## **Examples of Dynamic Rules** \n\n### **Rate-limiting access to a specific URL**\n\nIn the example below, this Dynamic Rule limits the number of requests that are sent to `/login` from a specific IP. \n\n![Rate-limiting access to a URL](../../.gitbook/assets/screenshot-2020-01-01-10.55.47.png)\n\nLimiting could also be done globally for all IPs by changing the Target to \"Planet.\"\n\n### **Using cookies to ban an attacker who is switching IPs**\n\nBy using a cookie threshold, it is possible to eliminate Denial Of Service attacks originating from the same session, even if the attacker is changing IP addresses. In the screenshot below, requests are counted toward the threshold if they have the same value for the \"rbzid\" cookie. Requests are not counted toward the threshold if they were Bypassed by an ACL, or if the requestor has already been banned. \n\n![Banning based on a cookie](../../.gitbook/assets/screenshot-2020-01-01-11.02.42%20%281%29.png)\n\n### Rate-limiting specific HTTP requests\n\nThis rule blocks HTTP GET requests from a specific IP for 10 hours, under these conditions:\n\n* The IP has submitted more than 3600 GET requests in the previous three minutes.\n* The requests were not for a static file \\(.png , .jpg, .ico, .gif\\).\n* The requests were not already blocked\n* The requests were not from IP 1.2.3.4.\n\n![Rate limiting specific HTTP methods](../../.gitbook/assets/screenshot-2020-01-01-13.46.35.png)\n\n","lastUpdated":"2025-03-01T09:50:54.919Z","hasImages":true,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/product-walkthrough/security/dynamic-rules.md"},{"id":39,"path":"using-the-product/best-practices/enabling-passive-challenges.md","content":"# Enabling Passive Challenges\n\nAs described in [Traffic Concepts](../../product-walkthrough/reblaze-traffic/traffic-concepts.md), out of the box Reblaze includes an **Active Challenge** process. This is very useful in distinguishing humans from bots.\n\nActive Challenges work well, but an even better option is **Passive Challenges**. \n\n* Active Challenges temporarily redirect the user's browser. This can affect site metrics gathered by products such as Google Analytics. \\(Specifically, the initial referrer information is lost.\\) Passive Challenges are simple pieces of Javascript. They do not redirect the user's browser; they merely ask it to solve a challenge, and then insert the Reblaze cookies.\n* Active Challenges will not occur when site content is served from a CDN. Passive Challenges can still detect bots in this situation.\n\nMost importantly, Passive Challenges allow Reblaze to use **Biometric Bot Detection**—an advanced and sophisticated means of distinguishing humans from automated traffic sources.\n\n## Biometric Bot Detection\n\nWith Biometric Bot Detection, Reblaze continually gathers and analyzes stats such as client-side I/O events, triggered by the user’s keyboard, mouse, scroll, touch, zoom, device orientation, movements, and more. Based on these metrics, the platform uses Machine Learning to construct and maintain behavioral profiles of legitimate human visitors. Reblaze learns and understands how actual humans interact with the web apps it is protecting. Continuous multivariate analysis verifies that each user is indeed conforming to expected behavioral patterns, and is thus a human user with legitimate intentions.\n\n{% hint style=\"info\" %}\n**We recommend that all customers enable Passive Challenges** if it is possible to do so. Biometric Bot Detection provides much more robust detection of automated traffic than is possible without it.\n{% endhint %}\n\n## Implementation\n\nImplementing Passive Challenges is simple. Place this Javascript code within the pages of your web applications:\n\n```text\n<script src=\"/c3650cdf-216a-4ba2-80b0-9d6c540b105e58d2670b-ea0f-484e-b88c-0e2c1499ec9bd71e4b42-8570-44e3-89b6-845326fa43b6\" type=\"text/javascript\"></script>\n```\n\n{% hint style=\"info\" %}\nThe code snippet can go into the header or at the end of the page. **The best practice is to place it within the header.** This ensures that subsequent calls contain authenticating cookies.\n\n\\(This matters for the first page served to a visitor. Subsequent pages will already have the authenticating cookies to include with their requests.\\)\n{% endhint %}\n\n{% hint style=\"info\" %}\n**Most customers set up the code snippet as a tag within their tag manager.** This makes it simple to install it instantly across their entire site/application.\n{% endhint %}\n\nIf desired, the script code can include `async` and/or `defer` attributes:\n\n```text\n<script async src=\"/c3650cdf-216a-4ba2-80b0-9d6c540b105e58d2670b-ea0f-484e-b88c-0e2c1499ec9bd71e4b42-8570-44e3-89b6-845326fa43b6\" type=\"text/javascript\"></script>\n```\n\n```text\n<script defer src=\"/c3650cdf-216a-4ba2-80b0-9d6c540b105e58d2670b-ea0f-484e-b88c-0e2c1499ec9bd71e4b42-8570-44e3-89b6-845326fa43b6\" type=\"text/javascript\"></script>\n```\n\nThese usually are not necessary, and their effect will depend on the placement of the script within the page. Their use is left to your discretion.\n\n## Testing\n\nTo test the implementation, use a browser to visit a page containing the Javascript snippet. Once it runs, the browser should have a cookie named **rbzid**.\n\n## Disabling Active Challenges \\(Optional\\)\n\nThere are two primary situations where customers sometimes want to disable Active Challenges:\n\n* **When a customer needs site analytics** to correctly reflect all referrers. \\(Active Challenges can interfere with this.\\)\n* **For API endpoints**. Active Challenges are designed to verify the client's browser environment; for most API calls, there is no browser environment to verify. \\(For users of our [Mobile SDK](../reblaze-api-1/mobile-sdk.md), this is not a problem. They can still use active challenges for these endpoints.\\)\n\nOther than those situations, Active Challenges can be very beneficial.\n\n{% hint style=\"info\" %}\n**We recommend that you keep Active Challenges enabled if possible.** They automatically eliminate almost all DDoS traffic, scanning tools, and other hostile bot traffic.\n{% endhint %}\n\nIf you wish to turn off Active Challenges, do the following.\n\n* **For specific URLs/locations:** remove the default \"**Deny Bot**\" [ACL Policy](../../product-walkthrough/security/profiles/acl-policies.md) from all [Profiles](../../product-walkthrough/security/profiles/) that are assigned to those locations. \n* **For an entire site/application**: remove the \"**Deny Bot**\" ACL Policy from all Profiles within the site.\n* **For specific traffic sources:** Add an ACL Policy that will 'Allow' those specific requestors. The requestors should be defined as narrowly as possible.\n\n{% hint style=\"info\" %}\nTurning off Active Challenges will disable the direct blocking of bots \\(where a requestor is blocked merely for being identified as a bot\\). However, automated traffic will still be excluded via all other relevant means. \n{% endhint %}\n\nIf you merely remove the Deny Bot ACL Policy from the relevant Profiles, then bots will still be excluded by the other active [ACL Policies](../../product-walkthrough/security/profiles/acl-policies.md), [Dynamic Rules](../../product-walkthrough/security/dynamic-rules.md), [content filtering](../how-do-i.../filter-by-content.md), and so on. If instead you added an \"Allow\" ACL Policy to specific requestors, then other ACL Policies will not block those requestors; they will be exempted from ACL Policy filtering.\n\n{% hint style=\"danger\" %}\n**If you have not enabled Passive Challenges** \\(and successfully tested them\\), disabling Active Challenges is not recommended.\n{% endhint %}\n\n\n\n","lastUpdated":"2025-03-01T09:53:29.432Z","hasImages":false,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/using-the-product/best-practices/enabling-passive-challenges.md"},{"id":8,"path":"product-walkthrough/security/README.md","content":"---\ndescription: Defining how Reblaze processes your traffic\n---\n\n# Security\n\nThis section defines the parameters with which Reblaze scrubs traffic. \n\nThe user interface is divided into five sections:\n\n1. [Static Rules](static-rules.md): Security settings that apply to your entire planet. \n2. [Dynamic Rules](dynamic-rules.md):  Thresholds for banning sources of hostile traffic.\n3. [Quarantined](quarantined.md): The \"warehouse\" of traffic sources that are currently banned. This contains blacklists and whitelists, allowing you to manually control quarantines when necessary. \n4. [Profiles](profiles/): Creation of security rule sets for assignment to specific resources, locations, and applications. \n5. [Args Analysis](args-analysis.md): Settings for allowing requests based on their arguments, in a procedure that occurs before normal WAF inspection and filtering.\n\nThe Security section is where you define the \"under the hood\" settings for Reblaze. When defining or editing the information in this section, careful consideration is necessary. \n\nBefore investigating each section of the interface, it's recommended to read the \"[Security Concepts](concepts.md)\" discussion on the next page of this Manual.\n\n","lastUpdated":"2025-03-01T09:50:29.946Z","hasImages":false,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/product-walkthrough/security/README.md"},{"id":10,"path":"product-walkthrough/security/concepts.md","content":"---\ndescription: How Reblaze scrubs incoming traffic\n---\n\n# Security Section Concepts\n\nWhen Reblaze receives an incoming request, it decides whether to pass the request through to the upstream server, or block it.\n\nThis decision-making is done in several stages. \n\n![](../../.gitbook/assets/reblaze-stages%20%282%29.png)\n\n| Stage | Comments |\n| :--- | :--- |\n| **Quarantines and Dynamic Rules** | Traffic from requestors that are currently on the [Banlist](quarantined.md#banlist) or [Blacklist](quarantined.md#blacklist) is blocked. Other requestors are evaluated for potential additional to the Banlist using [Dynamic Rules](dynamic-rules.md). |\n| **Static Rules and Rate Limits** | Requests that do not conform to specified size, time, and rate limits are blocked. More information: [Static Rules](static-rules.md) |\n| **ACLs** | Filtering based on [Access Control Lists](profiles/acl-policies.md), including [Custom Signatures](profiles/acl-policies.md#custom-signature). |\n| **Rate Limits** | Enforces rate limits defined for specific locations/resources within the planet. More information: [Setting Rate Limits for a Location](../settings/web-proxy/security-profiles.md#setting-rate-limits-for-a-location). |\n| **Challenges** | Verifies that requests are coming from humans. More information: [The Challenge Process](../reblaze-traffic/traffic-concepts.md#the-challenge-process). |\n| **Content Filtering**  | Blocks requests that do not conform to specified rulesets for required or disallowed content. This is the location-based filtering described in [Filtering on Content](../../using-the-product/how-do-i.../filter-by-content.md).  |\n| **Argument Analysis** | Examination of characters in arguments. Possible results are to exempt a request from WAF filtering, to send the request to the WAF for inspection, or to block the request. More info: [Args Analysis](args-analysis.md). |\n| **WAF/IPS Policies** | Blocks requests that do not conform to the [WAF/IPS Policy](profiles/waf-ips-policies.md) settings. |\n\nSome of the criteria for the decisions are global. In other words, they apply throughout your entire planet. For example, the settings in the [Static Rules](static-rules.md) section are globally applicable, and do not change depending on the context of the request. They will be applied to all traffic for all resources within your planet.\n\nConversely, some criteria are non-global, and they do depend on the context. For example, you can assign different security rulesets for different resources or locations within your planet. In other words, you can assign different rules to specific domains, subdomains, folders, filetypes, etc. \n\nThese non-global criteria are primarily defined within the [Profiles](profiles/) section. They have their own structure, explained in more detail in that section of this Manual \\(see especially the [Profile Concepts](profiles/profile-concepts.md) page\\). \n\nOnce Profiles are defined, they are available to be assigned to specific resources/locations within your planet. Those assignments are done in the [Settings-&gt;Web Proxy-&gt;Security Profiles](../settings/web-proxy/) section.\n\n","lastUpdated":"2025-03-01T09:50:51.652Z","hasImages":true,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/product-walkthrough/security/concepts.md"},{"id":4,"path":"product-walkthrough/reblaze-traffic/README.md","content":"---\ndescription: Viewing current and historical traffic data\n---\n\n# Traffic\n\nThe Traffic section allows you to monitor your network activity on a monthly, weekly, daily, hourly, or even minute-by-minute basis. It contains two primary sections: the Dashboard and View Log. \n\n\\*\\*\\*\\*[**Dashboard**](dashboard.md)**:** Provides an overview and a breakdown of your traffic to the VPC, during specified time frames. In addition, the Dashboard also provides information about Top Activities \\(a sorted summary of your top events\\). \n\n\\*\\*\\*\\*[**View Log**](view-log.md)**:** Provides the ability to view and query network traffic data. You can analyze and monitor traffic data in real time, or over custom time frames. \n\nBefore diving into the interface, it's helpful to first read [Traffic Concepts: How Reblaze reports on the requests it receives.](traffic-concepts.md)\n\n\\*\\*\\*\\*\n\n\\*\\*\\*\\*\n\n","lastUpdated":"2025-03-01T09:50:00.260Z","hasImages":false,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/product-walkthrough/reblaze-traffic/README.md"},{"id":5,"path":"product-walkthrough/reblaze-traffic/dashboard.md","content":"---\ndescription: An overview of traffic activity\n---\n\n# Dashboard\n\nAfter logging into Reblaze, the Dashboard screen is the first screen you'll see. It displays all incoming traffic and what happens to it. By default, this screen shows current activity; by using the archives, you can also 'go back in time' to see previous activity.\n\nThe user interface has three main sections: \n\n1. [Filtering and Time Interval Selection](dashboard.md#filtering-and-time-interval-selection)\n2. [Traffic Graphs](dashboard.md#traffic-graphs)\n3. [\"Top\" section](dashboard.md#top-section)\n\n## **Filtering and Time Interval Selection**\n\n### Query Box\n\nAllows you to easily filter the display to show exactly what you want. The structure of a filter is **operator:value**.\n\nFor example, to show all traffic from France that was blocked:\n\n`country:France, is:blocked`\n\n{% embed url=\"https://youtu.be/T4YQvZObcok\" %}\n\nFor a full explanation of Reblaze's Query box, including operators and syntax, [go here](../../using-the-product/best-practices/reblaze-filter.md).\n\n{% hint style=\"info\" %}\nQueries run in the Dashboard will display the results graphically. To see the results as a full list of the requests and their details, you can copy the filter string and paste it into the Query box in the [View Log](view-log.md).\n{% endhint %}\n\n### **Time Interval Selection**\n\nEnables the user to select a pre-defined time frame, or a custom time period. See the video below:\n\n{% embed url=\"https://youtu.be/OWb5QP7CDyk\" %}\n\n## Traffic Graphs\n\n### **Passed vs. Blocked**\n\nThis section shows the traffic that was processed by Reblaze: requests which passed through to the upstream servers, and requests that were blocked. Hits are distributed by time and sorted into three different categories: Humans, Challenges, and Blocked. As you can see in the example below, the data is shown in different colors to easily distinguish among the categories. \n\n![Passed vs. Blocked Graph](../../.gitbook/assets/image%20%2831%29.png)\n\n### **Response Status**\n\nCounts the number of status codes in a certain time period. \n\nHTTP Status response codes are divided into five categories:\n\n* **1xx**  - Informational Response \n* **2xx**  - Request Successful \n* **3xx** -  Request For Redirection \n* **4xx**  - Client Error\n* **5xx** -  Server Error \n\nFor a detailed list of response codes, [go here](../../reference-information-1/response-codes.md). \n\nAs in the Passed vs. Blocked display, the data is shown in different colors. \n\n![Incoming traffic sorted by 200, 403, and 503 status codes ](../../.gitbook/assets/image%20%2824%29.png)\n\n### **Requests Count**\n\nThe number of network requests during a certain period of time. \n\n![Requests Count Graph](../../.gitbook/assets/image%20%2880%29.png)\n\n### **Bandwidth**\n\nThe downstream bandwidth limitation per response. Left-axis units are \"k\" for kilobytes, and \"M\" for megabytes.\n\n![Bandwidth Graph](../../.gitbook/assets/image%20%2879%29.png)\n\n### Latency\n\nThis displays the time \\(in milliseconds\\) consumed by Reblaze's processing. \n\n![Latency Graph](../../.gitbook/assets/image%20%2898%29.png)\n\n### Zooming in\n\nYou can zoom in upon the various graphs, in order to examine a smaller window of time. The video below demonstrates this process.\n\n{% embed url=\"https://youtu.be/74CIjRAVIp0\" %}\n\n## \"Top\" Section\n\nThis section displays traffic statistics according to a variety of \"top\" metrics: the Top Applications, Top Countries, Top Signatures, etc.\n\nIn many of these displays, entries contain links. Clicking on them will open the traffic log, filtered to show the item you selected. For example, in the \"Top Countries\" view, clicking on a country name will open the traffic log to display the most recent requests originating from that country.\n\n#### **Section Characteristics**\n\n| **Name** | **Description** |\n| :--- | :--- |\n| **Hits** | Total amount of requests |\n| **Passed** | Requests that reached the upstream server |\n| **Blocked** | Requests that were blocked by one of Reblaze’s correlation engines. |\n| **Humans** | Requests that passed Reblaze's human vs. bot challenge process. |\n| **Bots** | Requests with originators that were not \\(yet\\) verified as humans. For a full explanation, see [Counting Bots](traffic-concepts.md#counting-bots). |\n| **Challenges** | Requests that were served with bot detection challenges. |\n| **Latency** | How much time it takes for a packet of data to get from one designated point to another. Displayed in milliseconds. |\n| **Dn** | Amount of traffic in MB that originated from the upstream server towards the clients. |\n| **Up** |  Amount of traffic in MB that originated from the client towards the upstream server. |\n\n### **Applications** \n\nShows all protected sites for the current Reblaze deployment. Applications marked in red have a **blockage rate above 30%.** The blockage rate is the ratio of requests blocked by the system to the number of total network requests. \n\nNote that in this section, \"Passed\" and \"Latency\" entries aren't shown, and \"Cloud\", \"Anon.\" and \"Blockage\" are added. Their meanings are:\n\n| Name | Description |\n| :--- | :--- |\n| **Cloud** | Cloud Providers \\(GCP, AWS, etc.\\) |\n| **Anon.** | Anonymous Proxy Browsers |\n| **Blockage** | Blockage rate |\n\n![Applications section](../../.gitbook/assets/image%20%2845%29.png)\n\n### **Countries** \n\nShows your traffic sorted by country. Each country's flag is shown by its name. \n\n![Countries section](../../.gitbook/assets/image%20%2837%29.png)\n\n{% hint style=\"info\" %}\n**On the screenshots below, IP addresses are censored for privacy reasons.** \n{% endhint %}\n\n### **Sources**\n\nShows traffic data according to IP address. The ASN \\(autonomous system number\\) for each IP is also shown.\n\n![Sources Section](../../.gitbook/assets/image%20%2878%29.png)\n\n### **Sessions**\n\nShows the nature of user sessions. Sessions that pass Reblaze's bot mitigation challenge are identified as originating from humans, and are listed here according to the user's RBZ \\(Reblaze\\) cookie ID. In the screenshot below, note that the first line shows \"-\" for the ID. These are sessions that did not pass the challenge. \n\n![Sessions section](../../.gitbook/assets/image%20%2864%29.png)\n\n### **Targets**\n\nShows the URLs in your site\\(s\\) that were accessed the most frequently. \n\n![Targets Section](../../.gitbook/assets/image%20%2825%29.png)\n\n### **Signatures**\n\nShows the reasons that traffic was blocked. Unlike other displays, this section does not include hits, passed, blocked, etc.—the counter only shows the number of blocks per signature. Here you can see which types of attacks are most common in your environment. In the example screenshot below, the first entry is \"-\": this shows requests that were blocked, but not by Reblaze \\(i.e., they were blocked \"by origin\"—by the upstream server\\). \n\nIn the example screenshot below, the third and fourth entries include a \"ref\" value. These are Reblaze reference IDs, [explained here](../../reference-information-1/reblaze-signatures.md).\n\n![Signatures section](../../.gitbook/assets/image%20%2857%29.png)\n\n### **Referers**\n\nShows the referers that were extracted from the request headers.\n\n![Referers Section](../../.gitbook/assets/image%20%2892%29.png)\n\n### **Extensions**\n\nAllows you to view the various file types that are being used by the application. \\(\"None\" shows the network requests that weren't counted as file extensions.\\) \n\n![Extensions section](../../.gitbook/assets/image%20%2812%29.png)\n\n### **Browsers**\n\nShows all the user agents that initiated requests for the application\\(s\\).\n\n![Browsers section](../../.gitbook/assets/image%20%2890%29.png)\n\n### **Companies**\n\nShows all of the ASNs \\(Autonomous System Numbers\\) from which requests were sent. The ASN can identify individual entities, or larger networks: for example, a telecom provider or a cloud provider.\n\n![Companies Section](../../.gitbook/assets/image%20%286%29.png)\n\n### **Latency**\n\nShows a list of all applications, with the corresponding latency for each. \n\n![Latency Section](../../.gitbook/assets/image%20%28109%29.png)\n\n","lastUpdated":"2025-03-01T09:50:00.899Z","hasImages":true,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/product-walkthrough/reblaze-traffic/dashboard.md"},{"id":13,"path":"product-walkthrough/security/profiles/acl-policies.md","content":"---\ndescription: Access Control List Policies\n---\n\n# ACL Policies\n\nThe ACL Policies section allows you to define [Policies and Rules](profile-concepts.md) by which Reblaze will scrub your incoming traffic. Once the Policies have been defined, they are assigned to specific resources \\(e.g., a section of your website\\) in the [Web Proxy](../../settings/web-proxy/) section.\n\nIn the discussion below, \"ACL\" and \"ACL Policy\" refer to the same thing: the Policies that can be administered in this section. \n\n![Example of an ACL Policy](../../../.gitbook/assets/image%20%2814%29.png)\n\nExisting ACLs are listed on the left. Selecting one will display it in the middle of the screen for editing. \n\nTo create a new ACL, click the \"Create New\" button toward the top of the screen, then \"ACL Policy.\" Or, duplicate an existing ACL and then edit the newly-created copy.\n\n{% hint style=\"info\" %}\nAs shown above, Reblaze comes with a default set of ACL Policies. \\(They are designated with the Reblaze logo.\\)\n\nThese Policies are not editable, because they are managed and maintained by Reblaze. They are updated as necessary with no action required on your part. \\(Typically these include dynamic elements that need frequent updating—for example, a list of IP addresses with a recent history of malicious activity.\\) \n{% endhint %}\n\nEach ACL contains one or more Rules. These are listed in the middle of the screen. To create a new Rule and add it to the current ACL, use the settings on the right part of the screen. \\(See below for more on this.\\) When you are finished with the Rule setup, click on the Add button. The Rule will be added to the Policy that you are currently defining or editing. \n\nTo remove a Rule from a Policy, click on the \"X\" to the right of its name. \n\n## **Creating a New Rule** \n\n![The Add a Rule section](https://lh4.googleusercontent.com/KIViGQL4voohIwkoJ4U1PnMp5cbQxln0GMsnbUz6eO564bYP4eNIDhNjoPwstNgNAZFjbTee8OeUk0D6o3T-6bJt4dbY0pLfLKUEEzjW-gBeu_aeV-1emNeF3f5mqt6KB7IXn-js)\n\n| Fields | Description |\n| :--- | :--- |\n| **Operation** | The action that will result when the Rule’s Match condition occurs.   |\n| **Match** | The type of parameter that will be tested to see if a Match occurs. |\n| **\\(unlabeled\\)** | The value for the Match condition. |\n\nEach of these fields is explained further below.\n\n### Operation\n\nThe Operation field has three possible values:\n\n* **Bypass**: the requestor will be granted access to the requested resource, without further evaluation or filtering of the request. However, although a Bypassed request will not be subject to further filtering, it will still show up in the logs \\(as “reason:bypassed”\\).\n* **Allow**: the requestor will not be presented with a challenge, but will still be evaluated by the WAF.\n* **Deny**: the requestor will not be allowed to access to the requested resource\n\nWhen constructing an ACL Policy from multiple Rules, the Rules are arranged in the hierarchy shown above \\(Bypass, then Allow, then Deny\\). Rules are evaluated in order from top to bottom. When a Rule resolves to an action, that action is implemented, and further evaluation ceases.\n\n### Match\n\nThere are five available options for Match:\n\n* Class\n* Company\n* Country\n* IP Address\n* Custom Signature\n\nThe first four of these are common matching conditions that are always available. The fifth choice allows you to select custom matching conditions that you constructed by using the [Custom Signature](custom-signature.md) feature.\n\n### Match Argument\n\nThis is the third, unlabeled field in the New Rule dialog. The correct entry will depend on the option that was selected for Match.\n\n#### Class\n\nIf you selected Class, enter one of these strings as the Match Argument:\n\n* anon-proxy \n* bot \n* cloud \n* tor \n* vpn\n\n#### Company or Country\n\nIf you selected either of these, enter the first few characters of the company name or country, and then choose the full name from the list that appears. \\(If the text box does not populate itself appropriately as you type the first few characters, check your spelling.\\)\n\n#### IP Address\n\nEnter the specific IP or range of IPs \\(e.g., 178.184.0.0/16\\).\n\n#### Custom Signature\n\nEnter the first few characters of a Signature that you created previously in the [Custom Signature](custom-signature.md) tab, and then choose the one you want from the list that appears. \\(If the text box does not populate itself with matching Signatures, check your spelling.\\)\n\n### Video demo\n\n{% embed url=\"https://youtu.be/C0KWA8OtjJQ\" caption=\"Creating an ACL Policy\" %}\n\n## Special ACLs\n\nBy adding the following characters as a suffix to the ACL's name, the ACL will behave as follows:\n\n| Suffix | Description | Examples |\n| :--- | :--- | :--- |\n| **OC** | Over-capacity override: ignore [Static Rules](../static-rules.md) rate limits. | Loadtest OC |\n| **XDeny** | \"God Mode\": bypass the Rule Operation hierarchy. | Global DR XDeny |\n\nFor an example of using the OC suffix, see [Bypassing Rate Limits for Loadtesting](../../../using-the-product/how-do-i.../bypassing-rate-limits-for-loadtesting.md).\n\nFor an example of using XDeny, see [Quickly Blocking an Attacker](../../../using-the-product/how-do-i.../quickly-blocking-an-attacker.md).\n\n","lastUpdated":"2025-03-01T09:51:07.109Z","hasImages":true,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/product-walkthrough/security/profiles/acl-policies.md"},{"id":14,"path":"product-walkthrough/security/profiles/custom-signature.md","content":"---\ndescription: For creating custom matching conditions\n---\n\n# Custom Signature\n\nCustom signatures are custom matching conditions that you can use in Rules and Policies to evaluate client requests.\n\nThese allow the administrator to \"catch\" traffic based on any parameter in the request or the response. They can be used in a number of situations. Some examples:\n\n1. \"Virtual patching\": Identifying an incoming exploit attempt for a newly-discovered vulnerability in the upstream network.\n2. Identifying logged-in admin users, so that their requests can be Bypassed. \n3. Identifying specific patterns of traffic that are suspected to be malicious, so they can be blocked.\n4. Identifying specific types of requests \\(e.g., XMLHttpRequest\\), so they can be blocked from specific sections of a website.\n\n![Custom Signature Section](https://lh3.googleusercontent.com/CWdMkganKGSKsl8_KtpvIhqEgiCIFHC6YFVxfw4rBolpXQzhZUk3Dew5Tbb9mf6wfQHWpuVVS9Btn3jRDdqd5ElFB_2LYwGZAcWlehRCUnBurvmNZFzq2MgQLrWGplacAjgYz6bP)\n\nSignatures that have already been defined are listed in the left column, while you can edit and create new ones on the right. Once a Signature has been created, it will be available in the [New Rule](acl-policies.md#creating-a-new-rule) section within the [ACL Policies](acl-policies.md) tab. \n\nCustom Signatures give you tremendous power and flexibility for evaluating your traffic. They are composed of one or more matching conditions, which can be combined using Boolean AND/OR operators. \n\nEach matching condition combines the entries in **Either one of the following fields** and **Is matching with**.\n\n## Possible entries for _Either one of the following fields:_ \n\n| Field Name  | Description |\n| :--- | :--- |\n| **Args** | Arguments in the request’s header |\n| **Arg Names**  | Argument names in the request’s header |\n| **Autonomous System Number \\(ASN\\)**  | The ASN for a specific entity |\n| **Country Name / City** | Geolocation  |\n| **Host Name**  | Destination Hostname |\n| **Query String** | Regex value inside the query string |\n| **Referer** | Referer / Via values |\n| **Remote Address** | Client Address in the request |\n| **Request Cookies**  | Cookie in the request’s header |\n| **Request Cookies Names**  | Cookie names in the request’s header |\n| **Request Filename**  | The GET request resource |\n| **Request Headers** | Specific headers inside the requests |\n| **Request Headers Names**  | Scan the request for specific header values |\n| **Request Method**  |  An HTTP method: PUT, POST, GET, etc. |\n| **Request Protocol**  | HTTP / HTTPS |\n| **Request URI** | The URI of the resource being requested  |\n| **User Agent** | The User-Agent of the requestor |\n\n## Entries in _Is matching with_\n\nThis text box accepts strings or PCRE \\(Perl Compatible Regular Expressions\\). \n\nAn explanation and some examples are here: [Pattern Matching Syntax](../../../reference-information-1/pattern-samples.md). \n\n## Creating custom signatures\n\nWhen you first create a Signature, one condition appears for editing. If you wish to create more than one, click on the Append Condition button at the bottom. This will add another condition for editing. \n\nYou can continue for as many conditions as you want. The conditions will be evaluated according to the Boolean operator specified by the Condition Type selector. \n\n","lastUpdated":"2025-03-01T09:51:14.268Z","hasImages":true,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/product-walkthrough/security/profiles/custom-signature.md"},{"id":15,"path":"product-walkthrough/security/profiles/profile-concepts.md","content":"---\ndescription: A fundamental part of traffic evaluation\n---\n\n# Profile Concepts\n\nAs mentioned earlier in [Security Section Concepts](../concepts.md), Reblaze's decision-making can vary depending on the context. In a typical Reblaze deployment, much of the traffic evaluation is done using Profiles. When Reblaze receives a request for web resources, it first determines the Profile that is in effect for the resource that was requested. \n\nReblaze's Profiles are hierarchical structures, so that you can set up your security framework in a modular fashion. Rules and collections of rules can be set up once, and re-used throughout your planet as needed.\n\nThe hierarchy has several levels:\n\n* **Profile**\n* **Policy**\n* **Rule**\n* **Condition and Operation**\n\nA **Profile** contains one or more Policies. A **Policy** contains one or more Rules. A **Rule** is a combination of a **condition** and an **operation**. Let's illustrate these with examples, from the bottom of the hierarchy upward.\n\nExample **conditions**: \n\n* Is the request coming from a specific country? Or ASN?\n* Is the request coming from a specific IP address?\n* Is the request coming from a proxy? Or a VPN? Or a Tor network?\n* Is the request for a specific URI?\n* Is the request originating from an allowed \\(or a disallowed\\) HTTP referer?\n* Does the request contain \\(or not contain\\) specific arguments?\n* Is the request using \\(or not using\\) a specific method or protocol?\n* Does the request contain \\(or not contain\\) a query string in a specific format?\n* Does the requesting client have \\(or not have\\) specific cookies, or a specific cookie structure?\n\nPossible **operations**:\n\n* Deny\n* Allow\n* Bypass \\(similar to \"Allow\", but the request will not be subject to further evaluation or filtering by other rules\\)\n\nExample **Rules**:\n\n1. If the requestor IP is within 131.253.24.0/22 \\[a known range of Bing crawlers\\], _Allow_.\n2. If the requestor IP is within 157.55.39.0/24 \\[a known range of Bing crawlers\\], _Allow_.\n3. If the requestor IP is within 1.10.16.0/20 \\[a range within the Spamhaus DROP list\\], _Deny_.\n4. If the requestor IP is within 1.32.128.0/18 \\[a range within the Spamhaus DROP list\\], _Deny_.\n5. If the requestor is a bot, _Deny_.\n6. If the requestor is using a proxy anonymizer, _Deny_.\n7. If the requestor's Company is \\[our company\\], _Bypass_.\n8. If the requestor submitted an HTTP/S request, _Deny_.   \n\nExample **Policies**:\n\n* Allow Bing Crawlers _\\[contains example Rules 1-2 above\\]_\n* Deny requestors on Spamhaus DROP list _\\[contains example Rules 3-4\\]_\n* Deny bots _\\[contains example Rule 5\\]_\n* Deny proxy users _\\[contains example Rule 6\\]_\n* Allow users from our company _\\[contains example rule 7\\]_\n* Deny all requests _\\[contains example rule 8\\]_\n\nExample **Profiles**:\n\n* Default: \n  * Allow Bing Crawlers\n  * Deny requestors on Spamhaus DROP list\n  * Deny bots\n  * Deny proxy users\n* Private area of our website, for internal use only:\n  * Allow users from our company\n  * Deny all requests\\*\\*\n\n\\*\\* _\"Allow\" Policies are evaluated before \"Deny\" Policies. When a match is found, no further evaluation is performed. In this example, company users will be Allowed, which exempts them from the Policy which Denies all requests_.\n\n{% hint style=\"info\" %}\nNote that while Profiles are defined in this section of the Reblaze UI, **they are assigned to specific resources/locations in the** [**Web Proxy -&gt; Security Profiles**](../../settings/web-proxy/security-profiles.md#assigning-a-security-profile-to-a-location) **section.** \n{% endhint %}\n\n","lastUpdated":"2025-03-01T09:51:17.960Z","hasImages":false,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/product-walkthrough/security/profiles/profile-concepts.md"},{"id":17,"path":"product-walkthrough/security/profiles/waf-ips-policies.md","content":"---\ndescription: Administration of built-in Security Policy modules\n---\n\n# WAF/IPS Policies\n\nAlong with its [ACL Policies](acl-policies.md), Reblaze includes WAF/IPS Policies. This section allows you to administer them.\n\nJust like ACL Policies, WAF/IPS Policies are included in [Profiles](./). Unlike ACL Policies, a Profile cannot contain more than one WAF/IPS Policy.\n\n![WAF/IPS Policies Screen](https://lh5.googleusercontent.com/1Fi8pzOZAav1DQo4g7U6t2WtD1uni1K21f5_AQJtsdDJD_YbpP8npfXvzQjxizjamtebuQanXtuTXxTc_S70QGf3IeOmEpA7NaujpHhOXJcM4xbHS2Tq4kOtf0RW37WcznmkmB7q)\n\nExisting WAF/IPS Policies are listed on the left side; selecting one will display its contents on the right for editing.  \n\nWhen viewing or editing a WAF/IPS Policy, the Active Modules section allows you to enable/disable some of the modules. The four on the left are always active and cannot be turned off. \\(However, an ACL Policy that resolves to an action of **Bypass** will exempt a requestor from them.\\) These four modules are: \n\n| **Parameter** | Functionality |\n| :--- | :--- |\n| **Essential Headers Checkup** | A request without a header is illegitimate \\(and generally is an indication of a bot\\). This module blocks these requests.  |\n| **HTTP Methods** | This module enforces the Allowed HTTP Methods that are defined in the list farther down the page.  |\n| **Argument Limitations** | This module enforces the Request Arguments Limitations that are specified below the list of Allowed HTTP Methods.  |\n| **RFC Compliance** | This module ensures that every request is RFC compliant. Most penetration tools are non-compliant \\(often deliberately so\\)—thus, this module alone defeats and excludes a high amount of hostile traffic.  |\n\nThe next three modules are optional, but are recommended in most situations: \n\n| **Parameter** | Functionality |\n| :--- | :--- |\n| **Bad Robots** | Identifies and blocks malevolent bots, based on their user agents. This works differently than the default **Deny Bot** ACL Policy, which uses active challenges to identify bots. Therefore, when active challenges are disabled, this WAF capability can still be used.  |\n| **Dual Encoding** | A common penetration technique is to encode a hostile request multiple times, in an attempt to evade detection and filtering. For example, an injection attack might be encoded in binary, and then sent as if it were plain text. Or, different types of encoding might be mixed together in the same request. This module detects and defeats these attempted attacks. |\n| **\\* Injection Proof** | This module detects and defeats different kinds of injection attacks: SQL, XSS, and OSC. \\(The \"\\*\" is a wildcard.\\) |\n\nBelow the modules is the list of **Allowed HTTP Methods**. In general, you should enable as few of these as possible, and then disable the rest. \n\nSometimes there are methods that are used only by a few specific users. A possible approach for this situation is to disable those methods here, and then define ACL Policies or Signatures by which those specific users are Bypassed from being blocked by this module. This strategy works, but it should only be done in deployments where the specific users can be reliably identified. \n\nAt the bottom of the page are the **Request Arguments Limitations**, **Whitelist Argument Names**, and **Whitelist Rule IDs**. These allow you to permit or deny requests based on the arguments contained in the request. For assistance with these entries, please [contact support](../../../support.md).\n\n![Request Arguments Limitations Section](https://lh6.googleusercontent.com/iAmfXAX0SVqw4X5kHin6Xucepa7ZcLq-P_hx_EEKI8BDbvGV5ONpu2HygmmtEtjr1Zbt0h9NmYKHe06TQYRtylxCmmH53IPsCvLVP0vwENBVfTH2EbXjDUh4UevsiDpqSeOCO2Rb)\n\n","lastUpdated":"2025-03-01T09:51:27.382Z","hasImages":true,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/product-walkthrough/security/profiles/waf-ips-policies.md"},{"id":18,"path":"product-walkthrough/security/quarantined.md","content":"---\ndescription: Administer the lists of which requestors are banned and/or permitted access\n---\n\n# Quarantined\n\n## Overview\n\nThe quarantined section will show requestors that have been banned for violation of the [Dynamic Rules](dynamic-rules.md), requestors that have been blacklisted, and requestors that have been whitelisted. You can add and remove requestors, and transfer them among the various lists. \n\n## Main Display\n\nThere are four lists of requestors in this section:\n\n1. **Banlist**\n2. **Simulation Banlist**\n3. **Blacklist**\n4. **Whitelist**\n\nEach is described in more detail below.\n\nFor each entry, it's possible to see the following: IP address, origin country, AS number, the violation that was triggered, \"CNT/Limit\" \\(the number of violations compared to the allowable limit\\), when the ban began, and when the ban will expire. \n\n![Quarantined requestors](../../.gitbook/assets/image%20%2821%29.png)\n\n### **Banlist** \n\n**All requests from these requestors are currently being rejected.** These requestors violated a Dynamic Rule that was set to “Ban” mode. \n\n### **Simulation Banlist**\n\n**These requestors are NOT having all their requests rejected.** These requestors violated a rule that was set to “Simulated Ban” mode. Simulated Bans are used mainly for testing new rules and seeing how they function, before converting those rules to Ban mode.\n\n### Blacklist\n\n**All requests from these requestors are currently being rejected.** These requestors were placed here by a Reblaze admin.\n\n### Whitelist\n\n**These requestors are exempted from the Dynamic Rules.** For example, even if they violate a rate limit, they will not be banned. \n\n## Managing Requestors on the Lists\n\nOn the right part of the screen is the section menu, invoked via the button with three vertical dots:![](../../.gitbook/assets/screenshot-2020-01-02-16.36.22.png). Depending on context, the section menu will offer the management abilities described below.\n\n## Adding an Entry\n\n#### Banlist and Simulation Banlist\n\nRequestors are added to the Banlist and Simulation Banlist automatically when they violate a Dynamic Rule. \n\n#### Blacklist and Whitelist\n\nYou can add a requestor manually to the Whitelist or Blacklist using the \"Add New Entry\" option in the section menu. This is demonstrated in the following video:\n\n{% embed url=\"https://youtu.be/gpxMH3cJAYI\" caption=\"Adding new entry - Example\" %}\n\nThe fields are:\n\n| Field Name | **Description**  |\n| :--- | :--- |\n| **Type** | Cookie, Country, ASN, IP, Request Body, Request Header. |\n| **Name** | Will appear for specific types: Cookie \\(Name\\), Headers, etc. |\n| **Value** | The value which will activate the blacklisting. For example, when Type is \"IP\", the blacklistable IP address would be entered here. |\n| **Reason** | User description of the reason for adding this entry. |\n| **Expiration** | The expiration of the entry, in Hours or Minutes \\(only relevant for blacklists\\).  |\n\n## Transferring an Entry\n\nRequestors can be transferred among the various lists with this procedure:\n\n1. Select the requestor\\(s\\) by checking the box at the left of each entry.\n2. Open the section menu.\n3. Choose the desired \"Move to\" command \\(e.g., \"Move to Whitelist\"\\).\n\n{% hint style=\"info\" %}\nMoving an item to the Banlist can only be done from the Simulation Banlist. \n{% endhint %}\n\n## Removing an Entry \n\n### Automatic Removal\n\nRequestors on the Banlist, Simulation Banlist, or Blacklist will be automatically removed when their expiration time is reached. \\(The Whitelist has no expiration time.\\)\n\n### Manual Removal \n\nRequestors can be manually removed from the list they are currently on:\n\n1. Select the requestor\\(s\\) by checking the box at the left of each entry.\n2. Open the section menu by clicking on its button \\(![](../../.gitbook/assets/screenshot-2020-01-02-16.36.22.png)\\).\n3. Choose \"Delete\".\n\n\n\n\n\n","lastUpdated":"2025-03-01T09:51:31.290Z","hasImages":true,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/product-walkthrough/security/quarantined.md"},{"id":19,"path":"product-walkthrough/security/static-rules.md","content":"---\ndescription: Constant settings that apply to the entire planet\n---\n\n# Static Rules\n\nThis section defines security ruleset parameters that apply to your entire Reblaze planet. They are \"static\" because they are simple settings, and do not vary according to context or circumstance. \n\n{% hint style=\"info\" %}\nThe settings in this section are global. They apply to all configured sites on the platform, even if the domain is set to [\"Report Mode\"](../settings/planet-overview.md#editing-a-web-application).\n{% endhint %}\n\nThe main page for this section has three tabs: \n\n* Timeouts\n* Sizing\n* Speed & Rate\n\nEach tab is discussed in-depth below. \n\nAt the upper right corner of this screen, there is a choice of two different sets of settings: **Default** and **DDoS**. Please ignore the DDoS settings: this mode has been deprecated, and will be removed from a future version of the interface. You should only work with the **Default** settings, since only these settings will be used by Reblaze.  \n\n{% hint style=\"warning\" %}\nAfter working in this section, remember to click on \"Save Changes.\" \n{% endhint %}\n\n{% embed url=\"https://youtu.be/LQOsj9TbTfs\" %}\n\n## Timeouts\n\nThe Timeout settings allow the system to monitor the time required to serve resources to each client. Any connection that exceeds the specific limits will be dropped. \n\n{% hint style=\"info\" %}\n**Why timeouts are important**\n\nSome DDoS tools \\(e.g., R-U-Dead-Yet, or RUDY\\) send a relatively small quantity of traffic requests, but do so as slowly as possible \\(often with each byte sent separately\\). While a legitimate request can be resolved in milliseconds, a single RUDY machine can tie up server resources for several minutes. Even a few hundred of these machines attacking your server can be very destructive.\n{% endhint %}\n\nThe Timeout settings allow Reblaze to block unresponsive requestors, whether their unresponsiveness is malicious or not. For most Reblaze deployments, the default timeout settings work very well. They are sufficient to filter out hostile traffic, while still accommodating even those users with low bandwidth.\n\n| Parameter | Timeout |\n| :--- | :--- |\n| **Header Timeout** | How long to wait for the client to send a request header. |\n| **Body Timeout** | If the body is not obtained in one read-step, this timeout begins.  If the timeout expires and the client has still sent nothing, the Reblaze Gateway returns error 'Request time out \\(408\\)'. |\n| **Keep Alive Timeout** | The timeout for keep-alive connections with the client. The Reblaze Gateway will close connections after this time. This setting increases server efficiency; it allows the server to re-use browser connections and save resources. When changing this value, special care should be taken; in some cases, it depends on specific cloud vendor and load balancer settings.   |\n| **Send Timeout**  | Specifies the response timeout to the client. This timeout does not apply to the entire transfer but, rather, only between two subsequent client-read operations. Thus, if the client has not read any data for this amount of time, the Reblaze Gateway shuts down the connection. |\n\nAll times are specified in seconds, as shown in the example below. \n\n![Timeouts Settings Example](../../.gitbook/assets/image%20%28115%29.png)\n\n## Sizing\n\nThis tab allows you to place limits on the amount of data that users can upload to the system. ****The defaults usually work well; however, if your application accepts user-generated content or other large files, then changes to these settings might be necessary.\n\n{% hint style=\"info\" %}\nPlease note that if you increase these settings within Reblaze, then the upstream server should also be configured to accept and store the quantity of data that Reblaze will \\(potentially\\) pass through.\n{% endhint %}\n\n![Default Sizing Example](../../.gitbook/assets/image%20%2843%29.png)\n\n| **Size** | Functionality |\n| :--- | :--- |\n| **Client’s Body Max Size** | Specifies the maximum accepted body size of a client request, as indicated by the request header Content-Length. Size in MBs.  |\n| **Large Client Headers** | Allows additional buffers to be used for large client headers. |\n\n## **Speed & Rate** \n\nThis tab allows you to limit the amount of resources consumed by an IP or individual user. \n\nReblaze can limit consumption by the **average** number of requests per second \\(the \"IP Requests\" and \"User Requests\" settings\\), while also allowing temporary **bursts** at a higher rate \\(\"IP Maximum Burst\" and \"User Maximum Burst\"\\). \n\n{% hint style=\"info\" %}\nThe average and burst limits are more nuanced than is possible to explain in the field labels in the user interface. Please see \"[Average and Burst Rate Limiting](static-rules.md#average-and-burst-rate-limiting)\" at the bottom of this page for a full explanation.\n{% endhint %}\n\nNote that this rate limiting is a global metric across all sites. For example, if one IP address is submitting requests to multiple web applications within a Reblaze planet, all the requests are combined when determining if rate limits have been violated.\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align:left\">IP Parameter</th>\n      <th style=\"text-align:left\">Functionality</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align:left\"><b>IP Requests</b>\n      </td>\n      <td style=\"text-align:left\">Sets the allowable average request rate per IP, per second.</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\"><b>IP Maximum Burst</b>\n      </td>\n      <td style=\"text-align:left\">Sets the allowable additional burst rate per IP, per second. See &quot;Average\n        and Burst Rate Limiting&quot; below, for a full explanation.</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\"><b>IP Concurrent Sessions</b>\n      </td>\n      <td style=\"text-align:left\">The maximum number of simultaneous sessions per IP. (An HTTP Session ends\n        upon a completion of the response sent.)</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\"><b>Downstream Bandwidth</b>\n      </td>\n      <td style=\"text-align:left\">\n        <p>Downstream bandwidth limitation per response.</p>\n        <p>Note: The limit is metered in kilobytes, ie. 1250 KB is equal to 10Mbps.</p>\n      </td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\"><b>User Requests</b>\n      </td>\n      <td style=\"text-align:left\">Sets the allowable average request rate per user, per second.</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\"><b>User Maximum Burst</b>\n      </td>\n      <td style=\"text-align:left\">Sets the allowable additional burst rate per user, per second. See &quot;Average\n        and Burst Rate Limiting&quot; below, for a full explanation.</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\"><b>User Concurrent Sessions</b>\n      </td>\n      <td style=\"text-align:left\">The maximum number of simultaneous sessions per user.</td>\n    </tr>\n  </tbody>\n</table>Here's an example screenshot:\n\n![Speed &amp; Rate limit example](https://lh5.googleusercontent.com/WAcHG_JvHXynYjY7nBm2-Af0Lkl17uf8TmXI5msYFgMuRO41QDfrWBPHBWOMRqzy81jZr2GIG0subutVJk6O1esxMvh8QvZp4JrP03Z5Sz-Yj8ewvs-z3EUBUKEWP3WJzxqJizZw)\n\n**When a requestor exceeds any of these thresholds, subsequent requests will be answered with error code 503 \\(Service Unavailable\\).** \n\n{% hint style=\"info\" %}\nFor most use cases, the two most important Speed & Rate parameters are IP Requests and IP Maximum Burst. \n{% endhint %}\n\n### Average and Burst Rate Limiting\n\nIn the Speed & Rate section, the rate limiting settings can be nonintuitive. Here is an explanation of how they work.\n\n**IP/User Requests** sets the allowable per-second average of incoming requests, enforced on an incremental basis \\(where \"increment\" refers to the number of milliseconds allowed for one request\\). **IP/User Maximum Burst** sets a higher per-increment ceiling.\n\n**Example:** IP Requests is set to 100 r/s. Thus, 100 requests are allowed per second. However, the system does not enforce rate limits on a per-second basis; it used a granularity of milliseconds. Therefore, it will allow one request every 10 milliseconds. \\(100 r/s, divided by 1000 ms/s, equals 1r/10ms.\\) \n\nWithout burst limits—i.e., if IP Maximum Burst is set to zero—the system will reject every request that was received less than 10ms after the previous one.\n\nNow the Reblaze admin sets IP Maximum Burst to 20. This means that Reblaze will accept 21 requests \\(1 original plus 20 additional\\) per 10 milliseconds. In other words, when a request is received, up to 20 more can be received and accepted within the following 10 ms. If instead 25 total requests are received during that time, the last four requests will be denied with a 503 error. \n\n","lastUpdated":"2025-03-01T09:51:35.603Z","hasImages":true,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/product-walkthrough/security/static-rules.md"},{"id":20,"path":"product-walkthrough/settings/README.md","content":"---\ndescription: Planet configuration and other parameters\n---\n\n# Settings\n\nThe Settings section has an extensive number of configuration values for Reblaze. These tend to be parameters that once set up, usually will not change during your use of Reblaze.\n\nThere are five sections in this part of the interface.\n\n[Web Proxy ](web-proxy/)contains parameters for the overall architecture of Reblaze and its interaction with the downstream clients and the upstream network. It includes settings for proxy behavior, load balancing, failover, and more. It is also where you assign Security Profiles to specific areas of your website.\n\n[SSL Management](ssl-management.md) is where SSL Certificates are uploaded and managed.\n\n[DNS](dns.md) is where DNS records are configured.\n\n[Planet Overview](planet-overview.md) shows you information relevant to your entire planet: the active domains and applications, what notifications are issued in response to events, and the ability to Publish changes that were made elsewhere in the interface.\n\n[Account](account.md) is where your user account settings are managed.\n\n","lastUpdated":"2025-03-01T09:51:45.396Z","hasImages":false,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/product-walkthrough/settings/README.md"},{"id":1,"path":"README.md","content":"---\ndescription: Product Manual and documentation\n---\n\n# Reblaze Portal\n\n\n\n{% page-ref page=\"introduction-to-reblaze.md\" %}\n\n{% page-ref page=\"quick-start-guide.md\" %}\n\n{% page-ref page=\"using-the-product/best-practices/\" %}\n\n{% page-ref page=\"using-the-product/how-do-i.../\" %}\n\n\n\n\n\n","lastUpdated":"2025-03-01T09:49:48.175Z","hasImages":false,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/README.md"},{"id":12,"path":"product-walkthrough/security/profiles/README.md","content":"---\ndescription: 'Profile: A re-usable collection of security policies'\n---\n\n# Profiles\n\nIn a typical deployment, Reblaze performs much of its traffic evaluation according to security Profiles.\n\nWithin the Reblaze user interface, there are four sections for defining Profiles: \n\n1. [Profiles](security-profile-setup.md)\n2. [ACL Policies](acl-policies.md)\n3. [WAF/IPS Policies](waf-ips-policies.md)\n4. [Custom Signature](custom-signature.md)\n\n![Security Profiles Screen](../../../.gitbook/assets/image%20%2858%29.png)\n\nBefore discussing each tab, it will be useful to discuss [Profile Concepts](profile-concepts.md).\n\n","lastUpdated":"2025-03-01T09:51:06.319Z","hasImages":true,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/product-walkthrough/security/profiles/README.md"},{"id":27,"path":"product-walkthrough/settings/web-proxy/security-profiles.md","content":"---\ndescription: 'Location-based security settings, and Report Only mode'\n---\n\n# Security Profiles\n\nIn this section, you can:\n\n* \\*\\*\\*\\*[**Define different locations**](security-profiles.md#managing-locations) and/or resources within your planet. For each one, you can:\n  * \\*\\*\\*\\*[**Assign a security Profile**](security-profiles.md#assigning-a-security-profile-to-a-location). Profiles are defined [elsewhere](../../security/profiles/) in the interface: this section is where you assign them and make them active for different locations within your planet.\n  * \\*\\*\\*\\*[**Configure rate limiting**](security-profiles.md#setting-rate-limits-for-a-location) ****\\(optional\\).\n  * \\*\\*\\*\\*[**Configure content filtering**](security-profiles.md#content-filtering-for-a-location) ****\\(optional\\).\n* \\*\\*\\*\\*[**Set a site/application into Report Only mode**](security-profiles.md#enabling-report-only-mode) ****\\(usually used only for testing\\).\n\n## Managing Locations\n\n![Defined Locations within the planet](../../../.gitbook/assets/image%20%2862%29.png)\n\nThe top right part of the screen shows the site that is currently being displayed for editing. \n\nOn the main part of this page, the various defined sections of the selected site are listed. The Default entry is always present.\n\nEach entry is defined as follows:\n\n| Item  | Description |\n| :--- | :--- |\n| **Name** | A descriptive label that you choose.  |\n| **Matching Path** | Defines a Location, i.e. everything within the planet that matches this Path. This entry uses [Pattern Matching Syntax](../../../reference-information-1/pattern-samples.md). |\n| **Profile** | The Security Profile assigned to this Location.  |\n| **More** | Configures rate limiting for this location, [explained below](security-profiles.md#setting-rate-limits-for-a-location).  |\n\nTo add a new Location, fill out the blank entry at the bottom and click Add. To delete a Location, click the Remove link next to its name.\n\n## Assigning a Security Profile to a Location\n\nOnce you have defined a Location, you can assign a Security Profile to it.\n\nWithin each Location entry, the Profile field is autocomplete. Typing the first few characters of a Profile name will populate the list appropriately, then select the desired Profile.\n\n## Setting Rate Limits for a Location\n\nOnce you have defined a Location and assigned a Profile to it, you can also \\(if desired\\) configure rate limits and content filtering for it.\n\nThis is synchronized protection: you can limit the request rate, according to any desired parameter, per URL or section, across the entire cluster, while keeping all the proxy servers in sync.\n\n{% hint style=\"info\" %}\nIf you need to whitelist an IP, Country, or ASN from being subject to this rate limiting, see [Whitelisting and Creating Exemptions from Rate Limits](../../../using-the-product/how-do-i.../set-rate-limits.md#whitelisting-and-creating-exemptions-from-rate-limiting).\n{% endhint %}\n\nAt the end of the Location's entry, click on \"More\" to open the Location Settings dialog.\n\n{% embed url=\"https://youtu.be/UJy\\_s0sVxRg\" %}\n\nThis displays whatever limits have been defined for this location, and another line to add a new limit.\n\n{% hint style=\"info\" %}\nSettings you make in this dialog will only apply to the location associated with the \"More\" button that opened the dialog.\n{% endhint %}\n\nEach limit defines the number of requests allowed for a specific time period, defined in the TTL field. When a request is received that matches one or more Keys, an internal TTL timer starts, and Reblaze begins counting. If the Rate Limit is reached before the TTL period has ended, subsequent requests are blocked until the current TTL period ends. \n\n![The Locations Setting dialog](../../../.gitbook/assets/location-settings.png)\n\nHere are the possible attributes: \n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align:left\">Field</th>\n      <th style=\"text-align:left\">Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align:left\"><b>Name</b>\n      </td>\n      <td style=\"text-align:left\">A name that will describe the limit. (This will be shown in the View Logs\n        for any requests that are blocked by this limit.)</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\"><b>Rate Limit</b>\n      </td>\n      <td style=\"text-align:left\">Sets the threshold for the requests. This is the number of requests allowed\n        per the time period defined in the TTL field.</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\"><b>Key Composition </b>\n      </td>\n      <td style=\"text-align:left\">\n        <p>The value for which Reblaze searches in a request. Explained in <a href=\"security-profiles.md#key-composition-values\"><b>Key Composition</b> <b>Values</b></a> below.</p>\n        <p></p>\n      </td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\"><b>TTL</b>\n      </td>\n      <td style=\"text-align:left\">The time period in seconds until the request count will be reset.</td>\n    </tr>\n  </tbody>\n</table>### Key Composition Values\n\nWhen counting the number of requests, Reblaze searches for the value of a Key. Each value has its own cumulative count. \n\nCombining Keys into one rate limit \\(by entering their names together, separated by a space\\) allows for more granularity. Examples:\n\n* `remote_addr` : Each IP will have its incoming requests counted, and evaluated separately against the Rate Limit. \n* `remote_addr uri` Each combination of IP and URI will be counted, and evaluated separately against the Rate Limit. In other words, Reblaze will count the requests from each IP for each URI, maintaining separate cumulative counts for each combination. So, if a specific IP asks for multiple pages within a site, it will be allowed; but if it asks for the same page too many times, it will be blocked.\n\nHere are the possible values for **Key Composition**.\n\n| Value | Description |\n| :--- | :--- |\n| **remote\\_addr** | The request's source IP address. |\n| **request\\_uri** | The request URI. |\n| **http\\_HeaderName** | Arbitrary request header field; the last part of a variable name is the field name converted to lowercase with dashes replaced by underscores. |\n| **arg\\_ArgName** | The name of an argument in the request. \\(See warning below.\\) |\n| **cookie\\_CookieName** | The name of a cookie. |\n| **request** | The full original request line \\(including the query string\\). |\n| **Custom** | See below for explanation: [**Advanced String Manipulation in the Key Composition**](security-profiles.md#advanced-string-manipulation-in-the-key-composition)**.**  |\n\n{% hint style=\"warning\" %}\nWhen using an argument in a rate limit \\(as mentioned in the **arg\\_ArgName** description above\\), the argument becomes **mandatory**. Any request received without the argument will be blocked.\n{% endhint %}\n\n### Advanced String Manipulation in the Key Composition\n\nYou can use Lua to manipulate strings in the Key Composition field. Use the `tostring()` function to return a string into the field.\n\nUsually there will also be a substring operation. This should come after the `tostring()`. Example:  `tostring():sub(1, 20)`\n\nInside the `tostring()`, there must be a valid NGINX variable, usually from ngx.var or ngx.ctx. The full variables list can be found [here](http://nginx.org/en/docs/varindex.html).\n\nExamples:\n\n* Substring - Suffix last 5 char :  `tostring(ngx.ctx.args_table['foo']):sub(-,5)`\n* Substring - Prefix from 1st char to 5th char: `tostring(ngx.ctx.args_table['foo']):sub(1,5)`\n\n![Prefix example](../../../.gitbook/assets/rate-limit-prefix.png)\n\nIf you need assistance with this feature, please feel free to [contact support](../../../support.md#contact-information).\n\n## Content Filtering for a Location\n\nFor each Location, along with defining rate limits, you can also set up content filtering.\n\nThis is a powerful feature that allows you to require, or deny, exact values for specific headers, cookies, and arguments, based on regex matching. \n\n**Content filter example**\n\n![Content Filtering example](../../../.gitbook/assets/content-filter.png)\n\nThe Filters do not have user-assigned descriptions or names \\(the Name field has a different meaning, described below\\) When a request is blocked based on the Content Filter, the request appears in the logs with a custom description constructed from the Filter's parameters.\n\n| **Parameter** | **Comments** |\n| :--- | :--- |\n| **Action** | **Required** to block if a match from the specified Pattern is not found. **Deny** to block if a match is found. |\n| **Data Item** | The source of content to examine. Options: Argument, Header, Cookie. |\n| **Name** | The name of the Data Item from which to get the content. |\n| **Pattern** | The matching conditions, specified as regex. |\n\nTo add a new Filter, enter values into the empty row in the list and click Add. Existing Filters can be deleted by clicking Remove. \n\nWhen you are finished configuring rate limits and content filtering for a location, click Done. After you have edited all Locations, [Save Changes and Publish Changes](../../../using-the-product/best-practices/publish-your-changes.md).\n\n## Enabling Report-Only Mode\n\nAt the bottom of the screen, the Report Only switch allows you to test your Reblaze configuration. Enabling this setting means that Reblaze will not block any traffic for this site/application; it will merely report on what it would have blocked otherwise. This is useful during a new deployment, since you can fine-tune and optimize your settings while avoiding false positives.\n\n{% hint style=\"info\" %}\nThis setting applies to the site/application currently being displayed. It is the same setting that is available for this site/application on the [Planet Overview](../planet-overview.md) page. See the warning there about this setting.\n{% endhint %}\n\n","lastUpdated":"2025-03-01T09:52:23.396Z","hasImages":true,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/product-walkthrough/settings/web-proxy/security-profiles.md"},{"id":21,"path":"product-walkthrough/settings/account.md","content":"---\ndescription: Changing user settings\n---\n\n# Account\n\nThe Account Settings allows you to review and modify your Reblaze user account. \n\nFrom this page, you can reset your password. Before this can be accomplished, you will need to enter an OTP \\(One Time Password\\) code that will be sent to you via SMS text message.\n\n![](../../.gitbook/assets/image%20%2822%29.png)\n\nAlternatively, you can scan the QR code shown on this page, using an app like Google Authenticator \\(available for both [Android](https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2) and [iPhone](https://itunes.apple.com/il/app/google-authenticator/id388497605)\\). \n\nThis will generate an OTP without requiring you to wait for an SMS message. \n\n\n\n\n\n\n\n","lastUpdated":"2025-03-01T09:51:48.321Z","hasImages":true,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/product-walkthrough/settings/account.md"},{"id":22,"path":"product-walkthrough/settings/dns.md","content":"---\ndescription: An optional but recommended capability\n---\n\n# DNS\n\nDNS Management is an optional capability. Your DNS management does not need to be done within Reblaze, but it can be. \n\nReblaze provide a full DNS service, based on[ AWS Route 53](https://aws.amazon.com/route53/). Reblaze also supports DNS on other cloud platforms, but they are not yet supported natively within the Reblaze interface. If you need this capability within your deployment, [contact support for assistance](../../support.md).\n\n### Motivation\n\nMany site administrators use their domain registrars as their DNS providers, but this is often a poor choice. In general, domain registrars do not place a high priority on DNS security \\(since DNS management is not a primary part of their business model\\), and attackers frequently target their DNS servers. A successful DNS poisoning attack can result in your site getting hijacked.\n\nManaging your DNS through a secure platform like Reblaze is a far better choice. This ensures your full stack is protected—even the DNS layer.\n\nA full explanation of DNS setup is beyond the scope of this Manual. The discussion below is an overview of Reblaze's capabilities and interface. Please [contact support](../../support.md) if you need assistance for your particular situation.  \n\n## Scope\n\nYou can manage millions of DNS zones and records using the Reblaze interface.\n\n![DNS Management section](../../.gitbook/assets/dns-mgmt.png)\n\nThe DNS Management feature of Reblaze is for both external and internal DNS administration. Internally, Reblaze maintains a special name for every planet \\(planetname.prod2.reblaze.com\\), and every domain protected by Reblaze is mapped to an entry in this domain. This system can also be used for domains accessible externally.\n\n## Administration\n\nAs shown in the example screenshot, this page is divided into two sections. The upper section is blue, and lists two special resource recordsets: SOA \\(Start Of Authority\\) and NS \\(Name Server\\). These are at the Zone level, and once created, these cannot be modified. They also will not be filtered \\(hidden from view\\) by the \"search\" feature.\n\nThe \"search\" feature is based upon the text box at the upper left. \n\n![Search Box](../../.gitbook/assets/image%20%2844%29.png)\n\nThis will control the DNS entries being displayed, by filtering them according to the search value and selected record type. Note that filtering does not apply to the entries in the blue section; these will always be displayed.\n\nTo add a new DNS entry, click on the \"New\" button on the right hand side. The following dialog is displayed:\n\n![Adding a new DNS Record](../../.gitbook/assets/image%20%2865%29.png)\n\nOnce a record has been created, it can be deleted \\(via the trash icon shown to the right of its entry in the list\\) or edited \\(via the blue edit icon shown to the right of its entry in the list\\). \n\n### Supported Record Types <a id=\"AFormat\"></a>\n\nReblaze supports the following types of DNS records: \n\n| Record Type | Description |\n| :--- | :--- |\n| A | Address record |\n| AAAA | IPv6 address record |\n| CNAME | Canonical name record |\n| MX | Mail exchange record |\n| NS | Name server record |\n| PTR | PTR resource record |\n| SOA | Start of \\[a zone of\\] authority record |\n| SPF | Sender policy framework \\(now discontinued, as of RFC 7208\\) |\n| SRV | Service locator |\n| TXT | Text record |\n| ALIAS CNAME | Alternative to CNAME that can coexist with other records on that name. |\n\nExpected formats for the respective values are given below.\n\n### A Record Type <a id=\"AFormat\"></a>\n\nThe value for an A record is an IPv4 address in dotted decimal notation.\n\nExample: \n\n`example: 192.150.2.1`\n\n### AAAA Record Type <a id=\"AFormat\"></a>\n\nThe value represents an IPv6 \\(128bit\\) address in a colon separated notation. \n\nExample: \n\n`20541:0da8:85a3:0:0:8a2e:0370:7334`\n\n### CNAME Record Type <a id=\"AFormat\"></a>\n\nA CNAME value is a domain name. \n\nExample: \n\n`www.sample.com`\n\n### MX Record Type <a id=\"AFormat\"></a>\n\nEach record includes a priority \\(integer\\) and an email server domain name. It is possible to add multiple records. \n\nExample: \n\n`10 mail1.sample.com`\n\n`20 mail2.sample.com`\n\n### NS Record Type <a id=\"AFormat\"></a>\n\nDelegates a DNS zone to use the given authoritative name servers. \\(It is possible to include multiple name servers.\\)\n\nExample: \n\n`ns1.amazon.com` \n\n`ns2.amazon.org` \n\n`ns3.amazon.net` \n\n`ns4.amazon.co.uk`\n\n### TXT Record \n\nIncludes a text record. \\(Enclose the text in quotation marks. Multiple entries are allowed.\\)\n\nExample: \n\n`\"test1\"`\n\n`\"test2\"` \n\n### SPF Record \n\nSPF records were formerly used to verify the identity of the sender of email messages. It's now deprecated, and a TXT record should be used instead. \n\nExample: \n\n`\"v=spf1 ip4:192.168.0.1/16-all\"`\n\n### SRV Record \n\nA generalized service location record, used for newer protocols instead of creating protocol-specific records such as MX.\n\nThe syntax is based on the following: \\[Priority\\]\\[Weight\\]\\[Port\\]\\[Domain Name\\]\n\nExample: \n\n`2 12 5050 sip-server.example.com`\n\n`3  15 5060 network.example.com` \n\n### **PTR Record**\n\nPointer to a canonical name. Unlike a CNAME, DNS processing stops and the name is returned.\n\nExample: \n\n`www.example.com`\n\n|  |\n| :--- |\n\n\n","lastUpdated":"2025-03-01T09:51:56.691Z","hasImages":true,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/product-walkthrough/settings/dns.md"},{"id":35,"path":"reference-information-1/response-codes.md","content":"# HTTP Response Codes\n\nHTTP defines forty standard status codes that can be used to convey the results of a client’s request. The status codes are divided into the five categories presented below.  \n\n\n| CATEGORY | DESCRIPTION |\n| :--- | :--- |\n| **1xx: Informational** | Indicates that the client's request is being processed. |\n| **2xx: Success** | Indicates that the client’s request was accepted successfully. |\n| **3xx: Redirection** | Indicates that the client must take some additional action in order to complete their request. |\n| **4xx: Client Error** | Indicates an error for which the client is responsible. |\n| **5xx: Server Error** | Indicates an error for which the server is responsible. |\n\nBelow are examples of the most common HTTP codes you will encounter in the logs:\n\n| HTTP Code | Description |\n| :--- | :--- |\n| **200** | OK: the standard response for successful HTTP requests. |\n| **301** | Used for URL redirection  |\n| **400** | Bad Request |\n| **401** | Unauthorized—authentication has failed |\n| **403** | Forbidden—request refused by Reblaze or origin server |\n| **404** | Destination not found |\n| **405** | Method not allowed  |\n| **408** | Request timeout |\n| **413** | Payload too large |\n| **414** | Request-URI too long |\n| **444** | No Response \\(nginx\\) |\n| **499** | Client Closed Request \\(nginx\\) |\n| **500** | Internal Server Error |\n| **503** | Service Unavailable—Server is unable to handle the request  |\n| **505** | HTTP version not supported |\n\n\n\n","lastUpdated":"2025-03-01T09:53:15.419Z","hasImages":false,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/reference-information-1/response-codes.md"},{"id":36,"path":"support.md","content":"---\ndescription: How to contact Reblaze\n---\n\n# Support\n\nReblaze is not a stand-alone platform; it is integrated with a dedicated support team which is available to you **24/7/365**. Please contact us at any time if you need assistance. \n\n**Our support is not limited to daily operational use of our platform.** We're happy to help with initial setup and configuration, ongoing administration, introductory or in-depth training, discussion of feature requests, and more.\n\n## Contact Information\n\nYou can contact support at any time via email: **support@reblaze.com** \n\nOr by phone: our international number is **+972 \\(73\\) 2005230**.\n\nOur US toll-free number is: **+1 \\(888\\) 6155996**.\n\nReblaze support will manage all tickets, and will be responsible for escalation as needed.\n\nPlease feel free to contact us. We're eager to help you achieve success, and to harness the full power of the platform!\n\n","lastUpdated":"2025-03-01T09:53:16.999Z","hasImages":false,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/support.md"},{"id":37,"path":"using-the-product/best-practices/README.md","content":"# Best Practices\n\nThis section describes best practices for some common tasks.\n\n{% page-ref page=\"publish-your-changes.md\" %}\n\n{% page-ref page=\"enabling-passive-challenges.md\" %}\n\n{% page-ref page=\"dealing-with-false-positive.md\" %}\n\n{% page-ref page=\"reblaze-filter.md\" %}\n\n\n\n\n\n","lastUpdated":"2025-03-01T09:53:18.209Z","hasImages":false,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/using-the-product/best-practices/README.md"},{"id":38,"path":"using-the-product/best-practices/dealing-with-false-positive.md","content":"---\ndescription: Leveraging Reblaze's traffic data\n---\n\n# Understanding and Diagnosing Traffic Issues\n\n## Introduction\n\nA typical security solution provides information about the traffic that it has blocked. Contrary to this, Reblaze shows _all_ of the traffic that it receives.\n\nThis provides you with a powerful ability to dig into your traffic data and gain deep understanding about the nature and disposition of incoming requests. \n\nMetrics about blocked requests are very useful, but their usefulness is multiplied when you can compare them to passed requests. By showing all requests, Reblaze allows you to understand what \"normal\" requests look like. This gives you more insights into abnormal traffic.\n\n{% hint style=\"info\" %}\n**The discussion below assumes you have already read the best practices for using the Reblaze Query Box.**\n{% endhint %}\n\nThat page is available here:\n\n{% page-ref page=\"reblaze-filter.md\" %}\n\n## Gaining General Insights\n\nReblaze provides multiple ways to view your traffic. The discussion below will focus on the [View Log](../../product-walkthrough/reblaze-traffic/view-log.md). Similar tactics can be applied when viewing different parts of the [Dashboard](../../product-walkthrough/reblaze-traffic/dashboard.md).\n\nSometimes the View Log is used to answer a specific question about a request or a traffic source. At other times, it might be a more general exploration; for example, a beginning-of-the-day review of what happened over the last 24 hours.\n\nLet's discuss the latter scenario \\(a general exploration\\). Because the View Log shows all requests, it can be overwhelming. It's helpful to start by excluding requests that aren't as relevant to your current purpose. Examples:\n\n* **Exclude passed requests, and show only the challenges or blocked requests**: `reason:challenge` \\(to show only challenges\\), or `is:blocked` \\(to show only blocked requests\\).\n* **Exclude health monitor checks**:  `url:!/health.htm` \\[the URL defined for the [Health Monitor](../../product-walkthrough/settings/planet-overview.md#configuring-health-monitoring)\\] \n* **Exclude requests being rejected by the origin** \\(i.e., the upstream server\\): `reason:!by origin`\n* **Exclude requests from a banned IP**: `ip:!1.2.3.4 .` Another approach: `reason:!autoban/etc.`\n* **Exclude requests that are obviously invalid**, e.g. those with unrecognized host headers.\n\nEventually, you can filter the display down to a list of challenges or blocked requests that might produce some insights.\n\nFrom this point, you are looking for possible patterns, or unusual outliers, and considering possible actions to take. For example:\n\n* **Are there a lot of requests for a Wordpress file, but your site does not use Wordpress?** These are coming from malicious traffic sources. It might be useful to set up a [Dynamic Rule](../../product-walkthrough/security/dynamic-rules.md), e.g. to Ban requestors who submit more than one request for that file in a three-minute period.\n* **Is the same IP failing multiple challenges?** It might be interesting to filter on that IP only, and go through all of its activity, to see what that traffic source was trying to do. \\(You can see that a challenge is being failed when the challenge itself appears in the logs, but it is not followed by a successful request by the IP for the same URI.\\)\n* **Are there many blocked requests for the same URI, but from different traffic sources?** This might be a False Positive alarm. See below for more on this.\n\nThere is no set procedure for this process. Essentially, you are browsing the list of challenges or blocked requests, thinking about why you are seeing the entries there, and asking further questions.\n\n## Translating Encoding in Requests\n\nSometimes, request data will be encoded. Here's an example of a XSS attempt.\n\n![IPs have been censored for privacy reasons](../../.gitbook/assets/screenshot-2020-01-01-14.57.05.png)\n\nThe script in the request is HTTP encoded. To see it in plain text:\n\n* Double-click on the reason \\(the yellow label beginning with XSS\\). \n* The full contents of the label will appear in the query box, decoded. \n\n![](../../.gitbook/assets/screenshot-2020-01-05-15.19.29.png)\n\n**For some forms of encoding, more processing is required.** \n\n* Reblaze does not perform all possible forms of decoding in the interface.\n* Double-encoded requests will only have their first level of encoding undone.\n\nIn these cases, you can highlight the string in the query box, copy it, and run it through decoding tools. \\(For example, [http://0xcc.net/jsescape/](http://0xcc.net/jsescape/).\\)\n\n## False Positive Alarms\n\nA “False Positive” \\(FP\\) alarm occurs when a security system misinterprets a non-malicious activity as an attack. These errors are a critical issue for cybersecurity.\n\nAlthough it might seem that FP errors do not necessarily have serious consequences, incorrect security alerts can lead to significant monetary losses. For example, an e-commerce site might incorrectly exclude real online shoppers. Or, it might reject \"good\" web crawlers, which would reduce its Internet visibility.\n\nFP diagnosis is often done when Reblaze is first deployed, before it has been fine-tuned for the customer's applications. It can also be done later, when you discover that certain requests are being blocked, but you do not understand why. \n\n## **Determining if a block is a FP**\n\nWhen examining blocked request\\(s\\), it can be helpful to ask questions such as the following.\n\n#### **Is Reblaze's configuration appropriate for the application?**\n\nSometimes an application will expect and accept inputs that Reblaze blocks by default. Example: the site might use a CMS which accepts HTML/Javascript POST requests. However, out of the box, Reblaze is often configured to block requests containing POST. Thus, Reblaze would need to be re-configured to match the application it is protecting. \\(In this example, it's a simple toggle switch in the WAF/IPS Policies interface.\\) \n\n#### **Has the web application been updated, without Reblaze being updated as well?**\n\nIf the range of valid inputs has changed, but Reblaze was not re-configured, then FP errors can result.\n\n**Is the block happening to multiple users?**\n\nIf a single IP is being blocked, but other requestors for the same URI are being allowed through, the block is more likely to be the correct response to this IP's request. This is especially true when the single IP has attempted other questionable activities.\n\nConversely, if multiple requestors are being blocked, and they seem to be innocuous otherwise, this indicates the problem might be a FP.\n\n#### Is the block being done by Reblaze, or is it coming from elsewhere?\n\nThere are some situations where a request is blocked even though Reblaze has no obvious reason to be blocking it. This can occur when Reblaze is not actually the entity making the decision.\n\n* **The upstream server can reject requests**. These requests can be displayed in the View Log with`reason:by origin` as the filter. \n* **Reblaze can use ACLs with external sources of information**, e.g. Spamhaus. **Example**: a request is blocked with a reason of `acl-ip`.  The reason indicates a Reblaze ACL blocked the request because of its IP—but what if you didn't configure any ACLs to reject specific IPs? The answer is that there are several ACLs which rely on external lists of hostile IPs, such as Spamhaus DROP and eDrop.\n\n#### Is this a FP that resulted from incorrect user actions?\n\nExample: a web user visited a landing page, entered contact details into a form, and then tried to proceed to the next page. However, the request to proceed was blocked. \n\nThis could be a FP due to \"junk input.\" Perhaps the user entered a phone number of \"1111111111\" and it was rejected by the upstream application. Or perhaps the page itself autocompleted a field and inadvertently created junk input on its own.\n\n#### Is this a FP that resulted from faulty or too-restrictive parameters within Reblaze?\n\nIf requestors are being blocked for violating rate limits, and the rate limits are very stringent, then perhaps the limits are too tight, and they need to be relaxed.\n\nOr, perhaps the block is the result of content filtering. This feature is powerful, and it is possible to mistakenly configure it to be too restrictive.\n\n**Example:** requests are being blocked because of a [Custom Signature](../../product-walkthrough/security/profiles/acl-policies.md#custom-signature) \\(`reason:acl-custom-sig`\\). \n\nLooking up the custom signature shows that its \"**Is matching with**\" condition is the following regex:\n\n`(?i)(select|create|drop|\\<|>|alert)\\W`\n\nThe admin wrote this regex in order to identify SQL injection attempts \\(i.e, SELECT, CREATE, and DROP commands. Normally SQL and code injection attempts are blocked automatically by the WAF, but occasionally customers choose to disable this\\).\n\nNow let's examine one of the blocked requests in the View Log. Its Capture Vector is this:\n\n`https://www.pinterest.com/pin/create/button/?url=https%3A%2F%2Fexample.com%2Fpitbull-2012%3Frt%3Dstorefront%26rp%3Dpitbull%26rn%3DPitbull%26s%3Dhanes-S04V%26c%3DBlack%26p%3DFRONT&amp;media=&amp;description=`\n\nThis can be decoded with a tool such as [http://0xcc.net/jsescape/](http://0xcc.net/jsescape/). It now becomes this:\n\n`https://www.pinterest.com/pin/create/button/?url=https://example.com/pitbull-2012?rt=storefront&rp=pitbull&rn=Pitbull&s=hanes-S04V&c=Black&p=FRONT&amp;media=&amp;description=`\n\nNow let's see why the regex condition matched the request. On [https://www.debuggex.com/](https://www.debuggex.com/), it's possible to paste in regex and a string, and see if/where a match occurs.\n\n![The result from deguggex.com](../../.gitbook/assets/screenshot-2020-01-05-16.34.53.png)\n\nNotice the highlighted \\(in yellow\\) part of the string in the bottom textbox. This shows which part of the bottom string matches with the regex in the box above it.\n\nWe see that the expression that was meant to identify an SQL command of CREATE, is also matching with the URL generated by a user who was trying to feature this site's product on Pinterest.\n\nThis indicates that the regex should probably be modified, so that it only accomplishes its intended purpose. In this example, it could be modified as follows:\n\n`(?i)(\\sselect|\\screate|\\sdrop|\\<|>|alert)\\W`\n\nThis would require a space to be found before each potential SQL command, thus eliminating matches when those words are found in a URL.\n\n## Summary of FP Detection\n\nAs mentioned earlier, there is no set procedure for the process of identifying the underlying reasons why requests are blocked. It requires digging into the requests, gathering data, and asking questions.\n\nHopefully the examples above are helpful in illustrating the necessary thought process, and some of the tools that are available.\n\n","lastUpdated":"2025-03-01T09:53:18.640Z","hasImages":true,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/using-the-product/best-practices/dealing-with-false-positive.md"},{"id":23,"path":"product-walkthrough/settings/planet-overview.md","content":"---\ndescription: Administering your entire planet\n---\n\n# Planet Overview\n\nThe Planet Overview page enables the following actions: \n\n1. Managing your planet's sites/applications. \n2. Configuring a site/application's health monitoring.\n3. Making a site/domain active, or inactive \\(in \"Report Only\" mode\\). \n4. [Publishing configuration changes.](../../using-the-product/best-practices/publish-your-changes.md)\n5. Configuring Notifications and Alerts.\n\nNote that in the discussion below, \"site\" and \"web application\" are synonymous.\n\n{% embed url=\"https://youtu.be/zFCWuDCDVgM\" caption=\"Planet Overview - Recap of Active Web Applications\" %}\n\nThis section allows you to add and modify web applications. It does not provide the ability to delete them.\n\n{% hint style=\"info\" %}\nDeleting a web application is done in the General Settings on the [Web Proxy](web-proxy/web-proxy-general-settings.md#site-deletion) page.\n{% endhint %}\n\n## Adding a Web Application \n\nCreating a new web application is done by duplicating an existing one, and then editing the one that is created. \n\n* Select an existing site that is the most similar to the one you want to add.\n* On the far right part of the screen, click on its \"Duplicate\" button.\n* This will clone the site and create a new one with identical settings, which you can then edit.\n\n## Editing a Web Application\n\nClicking on a site name will open it in the [Web Proxy](web-proxy/) page, where those settings can be edited. \n\n### Making a site active or inactive \\(\"Report Only\" mode\\)\n\nEach web application has two possible Security modes: \n\n| Security Mode | Description  |\n| :--- | :--- |\n| **Active** | The WAF will log all traffic, and actively block traffic deemed to be hostile. |\n| **Report** | The WAF will log all traffic, including reasons that requests are deemed to be hostile, but will not block anything.  |\n\n{% hint style=\"warning\" %}\nPlease note that the security mode applies only to the WAF & ACL**.** **Regardless of its setting, Static Rules are still enforced, and challenges will also occur** \\(except for those locations/resources which have had a \"no challenge\" profile assigned to them in the [Security Profiles](web-proxy/security-profiles.md#assigning-security-profiles-to-resources-and-locations) section\\). \n{% endhint %}\n\n### Generating a New SSL Certificate \n\nReblaze integrates with [Let's Encrypt](https://letsencrypt.org/) to provide free SSL Certificates. \n\nBy clicking on the \"Gen Cert\" button at the end of an entry in the site list, you can:\n\n* Generate a new certificate without attaching it to a site\n* Generate a new certificate and immediately attach it to a site. If the site has an existing certificate, it will be replaced by the new one.\n\nIn either case, this is the dialog you will see: \n\n![Generate Certificate Pop-Up](../../.gitbook/assets/image%20%2846%29.png)\n\nJust choose the button for the activity you want.\n\n### Configuring Health Monitoring\n\nIn a typical deployment, incoming traffic is load-balanced, processed by Reblaze, and then \\(if it is legitimate\\) passed through to the upstream origin. \n\nLoad-balancing includes more than just equal distribution of loads; it also includes failover. To perform this correctly, the health of the upstream origin must be monitored.\n\nIn this section of the interface, you can define a URL within your site that can be queried by the load balancer. If the URL is accessed successfully, the site is assumed to be healthy and capable of handling a continuing load. If the URL is not accessed successfully, the site is deemed to be unhealthy; depending on the configuration, a failover process might then begin.\n\nTo set up health monitoring for a site, click on its \"\\[Health\\] Monitor\" button: ![](../../.gitbook/assets/screenshot-2019-12-29-17.06.30.png). Doing so will open this dialog:\n\n![Health Monitor settings](../../.gitbook/assets/planet-overview-health-monitor.png)\n\nHere are the available settings. Check marks at the end of certain fields indicate that the entries are valid.\n\n| **Setting** | **Description** |\n| :--- | :--- |\n| Protocol | Options are **Do Not Monitor**, **HTTP**, and **HTTPS**. HTTP is offered as a faster option \\(compared to HTTPS\\) for a static resource where an insecure connection would have no potential consequences. If HTTP is selected for health monitoring, it will not be overridden by any specification elsewhere within the Reblaze interface to use HTTPS.   |\n| Notify Only | Enabled \\(displaying as blue\\) by default. When enabled, an unsuccessful health check only results in a notification being sent \\(and another notification will be sent when the first subsequent health check succeeds\\); traffic is not failed over to other servers. This is the default setting, because many customers do not have more than one upstream. Even when more than one upstream exists, disabling this setting can mean that upstreams get taken offline as the result of network issues. |\n| Host Header | The header for the request. Default is $Host. |\n| URL | The URL of the resource that should be requested to verify health. |\n| Expected Status | HTTP status code to use in the response to the request. |\n| Server | The server where the resource's URL is located. |\n\n#### Reset States\n\nThis button resets the health statuses that are displayed in the interface. It does not trigger a health check; it merely resets the status displayed to the user.\n\nFor example, a user has disabled health monitoring for a particular upstream server. \\(Perhaps it has been intermittently failing its health check.\\) However, its most recent status was \"failed,\" and so its IP address is appearing as red in the interface. To remove this distraction, the user clicks on Reset States. The IP address will now be showed normally. \n\n## Notification and Alert Settings \n\nAt the bottom of the Planet Overview are the Notification Settings.\n\n![Notification Settings interface](../../.gitbook/assets/planet-overview-notification-settings.png)\n\nWhen a [Dynamic Rule](../security/dynamic-rules.md) is violated, Reblaze can send immediate alerts to a list of one or more email addresses, SMS numbers, and hooks \\(e.g., Slack\\). \n\nIn addition, a cumulative report of the previous week's violations can be sent to one or more email addresses. \n\nThis section defines one or more **Notification Groups** for these notifications. Clicking on the \"**+**\" button on the right will display this dialog:\n\n![Creating a new Alert Group](../../.gitbook/assets/planet-overview-notification-new.png)\n\nThe settings for a Notification Group are as follows.\n\n| Setting | Description |\n| :--- | :--- |\n| Group Name | A name you choose for display in the Group listing. |\n| Sites | The site\\(s\\) for which alerts will be sent. To include multiple sites, select them one by one from the dropdown list. |\n| Rules | The Dynamic Rules which, when violated, will trigger alerts. To include multiple Dynamic Rules, select them one by one from the dropdown list. When more than one rule is included, a violation of one or more will trigger the notification. |\n| Alerts | Information for the recipients of alerts: their email addresses, hooks, and mobile numbers for SMS messages. |\n| Reports | Email addresses for the recipients of cumulative weekly reports.  |\n\nAn existing Notification Group can be edited by clicking on its listing, or deleted by clicking on the trash button at the right end of its listing.\n\n{% embed url=\"https://www.youtube.com/watch?v=q-YD5rKbEjY&feature=youtu.be\" caption=\"Example of setting new Notification Group\" %}\n\n\n\n","lastUpdated":"2025-03-01T09:52:03.700Z","hasImages":true,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/product-walkthrough/settings/planet-overview.md"},{"id":2,"path":"SUMMARY.md","content":"# Table of contents\n\n* [Reblaze Portal](README.md)\n* [Introduction to Reblaze](introduction-to-reblaze.md)\n* [Getting Started](quick-start-guide.md)\n* [Reblaze Setup Checklists](reblaze-checklist.md)\n\n## Console UI Walkthrough <a id=\"product-walkthrough\"></a>\n\n* [Traffic](product-walkthrough/reblaze-traffic/README.md)\n  * [Traffic Concepts](product-walkthrough/reblaze-traffic/traffic-concepts.md)\n  * [Dashboard](product-walkthrough/reblaze-traffic/dashboard.md)\n  * [View Log](product-walkthrough/reblaze-traffic/view-log.md)\n* [Security](product-walkthrough/security/README.md)\n  * [Security Section Concepts](product-walkthrough/security/concepts.md)\n  * [Static Rules](product-walkthrough/security/static-rules.md)\n  * [Dynamic Rules](product-walkthrough/security/dynamic-rules.md)\n  * [Quarantined](product-walkthrough/security/quarantined.md)\n  * [Profiles](product-walkthrough/security/profiles/README.md)\n    * [Profile Concepts](product-walkthrough/security/profiles/profile-concepts.md)\n    * [Profiles](product-walkthrough/security/profiles/security-profile-setup.md)\n    * [ACL Policies](product-walkthrough/security/profiles/acl-policies.md)\n    * [WAF/IPS Policies](product-walkthrough/security/profiles/waf-ips-policies.md)\n    * [Custom Signature](product-walkthrough/security/profiles/custom-signature.md)\n  * [Args Analysis](product-walkthrough/security/args-analysis.md)\n* [Settings](product-walkthrough/settings/README.md)\n  * [Web Proxy](product-walkthrough/settings/web-proxy/README.md)\n    * [General Settings](product-walkthrough/settings/web-proxy/web-proxy-general-settings.md)\n    * [Application Profiles](product-walkthrough/settings/web-proxy/application-profiles.md)\n    * [Security Profiles](product-walkthrough/settings/web-proxy/security-profiles.md)\n  * [SSL Management](product-walkthrough/settings/ssl-management.md)\n  * [DNS](product-walkthrough/settings/dns.md)\n  * [Planet Overview](product-walkthrough/settings/planet-overview.md)\n  * [Account](product-walkthrough/settings/account.md)\n\n## Using the product\n\n* [Best Practices](using-the-product/best-practices/README.md)\n  * [Saving and Publishing Your Changes](using-the-product/best-practices/publish-your-changes.md)\n  * [Enabling Passive Challenges](using-the-product/best-practices/enabling-passive-challenges.md)\n  * [Using the Reblaze Query Box](using-the-product/best-practices/reblaze-filter.md)\n  * [Understanding and Diagnosing Traffic Issues](using-the-product/best-practices/dealing-with-false-positive.md)\n* [How Do I...](using-the-product/how-do-i.../README.md)\n  * [Ban, Unban, and Whitelist Traffic Sources](using-the-product/how-do-i.../ban-unban-and-whitelist-traffic-sources.md)\n  * [Bypass Rate Limits for Loadtesting](using-the-product/how-do-i.../bypassing-rate-limits-for-loadtesting.md)\n  * [Control Caching Behavior](using-the-product/how-do-i.../cache-modes.md)\n  * [Filter by Content](using-the-product/how-do-i.../filter-by-content.md)\n  * [Quickly Block an Attacker](using-the-product/how-do-i.../quickly-blocking-an-attacker.md)\n  * [Secure Traffic from a Third-Party Page](using-the-product/how-do-i.../secure-traffic-from-a-third-party-page.md)\n  * [Set Rate Limits](using-the-product/how-do-i.../set-rate-limits.md)\n* [Reblaze API](using-the-product/reblaze-api-1/README.md)\n  * [Reblaze REST API](using-the-product/reblaze-api-1/reblaze-api.md)\n  * [Mobile SDK](using-the-product/reblaze-api-1/mobile-sdk.md)\n\n## Reference Information <a id=\"reference-information-1\"></a>\n\n* [Acronyms](reference-information-1/acronyms.md)\n* [HTTP Response Codes](reference-information-1/response-codes.md)\n* [Pattern Matching Syntax](reference-information-1/pattern-samples.md)\n* [Reblaze Signatures](reference-information-1/reblaze-signatures.md)\n* [TTL Expression Syntax](reference-information-1/custom-ttl-values.md)\n* [Support](support.md)\n\n","lastUpdated":"2025-03-01T09:49:49.010Z","hasImages":false,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/SUMMARY.md"},{"id":24,"path":"product-walkthrough/settings/ssl-management.md","content":"---\ndescription: Administration of certificates\n---\n\n# SSL Management\n\n## Introduction\n\nThis section allows you to manage your SSL Certificates. You can create, edit, attach, and remove certificates. The certificates themselves can be uploaded and stored into Reblaze's cloud, or a cloud load balancer.\n\n#### A note on certificates and sites\n\nIf you are reading this Manual as part of an initial evaluation of Reblaze, and if you have large numbers of certificates to manage, you should know that Reblaze treats certificates differently than most other security solutions. \n\nIt's not unusual for some companies \\(especially SaaS platforms\\) to have dozens or even hundreds of certificates to manage. Unfortunately, most security solutions treat each SSL Certificate as a separate \"site,\" and they charge their customers on a per-site basis. Thus, these solutions can be extremely expensive. \n\nContrary to this, Reblaze does not treat certificates as sites. A certificate is merely a certificate. For customers with tens or hundreds of certificates to manage, Reblaze's monthly pricing can be one or two orders of magnitude less than its competitors'.\n\n## Section Overview \n\nThe SSL Certificate Management interface displays certificates according to the load balancer to which they are attached. Those stored in the Reblaze cloud are listed as \"None.\"\n\n![SSL Certificate administration](../../.gitbook/assets/ssl-screenshot.png)\n\nDisplayed parameters are:\n\n| Parameter | Description |\n| :--- | :--- |\n| **Name** | A unique identifier for use elsewhere in the interface. |\n| **Common name** | The domain name for which the certificate was created. It can be a single domain \\(“www.example.com”\\) or a wildcard expression. For example, “\\*.example.com” will match “example.com” and all its subdomains. |\n| **Expiration** | When the certificate expires. |\n| **Issuer** | The source of the certificate. |\n| **Linked To** | This field is populated when this certificate is chosen for use in the [Proxy Settings](web-proxy/) section.  |\n\nChoosing a different load-balancer option will filter the certificates and display only the ones attached to that LB. \n\n![Filtering by load balancer](../../.gitbook/assets/image%20%2891%29.png)\n\n## **Generating a new certificate**\n\nReblaze provides the capability to generate an SSL Certificate for free using the Let's Encrypt service. This is not done in this section of the interface; it is done using the \"Gen Cert\" button on the [Planet Overview](planet-overview.md#generates-new-certificate) page. \n\n## **Adding an existing certificate to Reblaze**\n\nSSL certificates can be added to Reblaze in two ways: \n\n* Uploading a PFX file.\n* Manually entering the certificate information.\n\nIn both cases, begin by clicking the \"New\" button. This dialog will appear:\n\n![Adding a new certificate](../../.gitbook/assets/ssl-add-new.png)\n\nTo upload a PFX file, select \"Choose File.\" Otherwise, enter the Cert Key and Cert Body values into their respective text boxes.\n\n#### Selecting a load balancer \n\nOn the upper right, select the load balancer to which this certificate will be attached. If \"None\" is selected, the certificate will be uploaded and stored on Reblaze's cloud. \n\n#### Specifying application\\(s\\)\n\nIn the example screenshot above, a specific load balancer IP has been selected. This enables the options shown at the bottom of the screenshot:\n\n* **Attach to Application**: Specifies the application/site to which this certificate will be attached.\n* **Replace existing certificate:** Replaces an existing certificate with this new one. All web applications that were attached to the specified certificate will now be attached to the new one.\n\n## **Editing and managing existing certificates**\n\nTo remove an existing certificate, click on its trash icon to the right of its entry in the list. You can delete a certificate if it's not linked to a site. However, you cannot remove the last certificate on a load balancer.\n\nTo edit a certificate, click on its blue edit icon to the right of its entry in the list. This dialog will appear:\n\n![](../../.gitbook/assets/ssl-edit.png)\n\nUnder \"What would you like to do?\", the following options are offered. \n\n* **Replace existing certificates** - When this is chosen, a \"Select Certificate\" dropdown list will appear. Selecting one and then clicking \"Save\" will result in all sites/applications being transferred from the selected certificate over to the certificate you're currently editing.\n* **Attach to application** - Select an application/site and attach it to this certificate.\n* **Copy to another load balancer** \\(available only when this certificate is attached to a LB, and more than one LB exists\\) - Allows you to copy the certificate and upload it directly to another load balancer.\n* **Auto Let's Encrypt Renewal/Replacement**: See discussion below.\n* **Download PFX**: Download the certificate information as a file in PFX format.\n\nWhen managing certificates through one of these options \\(except for \"Download PFX\"\\), you must click the Save button to preserve your changes. \n\n## **Automated renewal using Let's Encrypt**\n\nLet's Encrypt is a free certificate authority service. Reblaze integrates with it, and offers this service by default. \n\nOnce a day, Reblaze will check each application it protects. If that application's certificate is going to expire in the coming week, then the following process occurs:\n\n* If the **Auto Let's Encrypt Renewal** option for that certificate is enabled, Reblaze will generate a new certificate using Let's Encrypt.\n* If the **Auto Let's Encrypt Replacement** option for that certificate is enabled, Reblaze will generate a new certificate using Let's Encrypt, and will attach all of its sites to the new certificate.\n\n","lastUpdated":"2025-03-01T09:52:13.038Z","hasImages":true,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/product-walkthrough/settings/ssl-management.md"},{"id":25,"path":"product-walkthrough/settings/web-proxy/README.md","content":"# Web Proxy\n\nWhen you deploy Reblaze to protect your web assets, it acts as a proxy, receiving requests from clients \\(web visitors, mobile/native app users, etc.\\), blocking hostile traffic, and passing legitimate requests to your servers.\n\nThe Web Proxy section defines how Reblaze behaves in this role. It consists of three tabs: \n\n* [General Settings](web-proxy-general-settings.md)\n* [Application Profiles](application-profiles.md)\n* [Security Profiles](security-profiles.md)\n\nProxy settings are configured per site/application. To switch between them, click on the drop down menu on the right side.  \n\n![Proxy Settings](../../../.gitbook/assets/image%20%2829%29.png)\n\nAfter making edits to this section, don't forget to [Save Changes and Publish](../../../using-the-product/best-practices/publish-your-changes.md) them to the cloud. \n\n","lastUpdated":"2025-03-01T09:52:19.633Z","hasImages":true,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/product-walkthrough/settings/web-proxy/README.md"},{"id":16,"path":"product-walkthrough/security/profiles/security-profile-setup.md","content":"---\ndescription: A page for administration of security Profiles\n---\n\n# Profiles\n\nWithin the Security section, this tab provides an interface for administering Profiles.\n\n![Profiles Section](https://lh3.googleusercontent.com/_lmiM6Tpoa4VYrsJfgiaGh3GWAKX0WLxhu9xBmyOTHSufaJrZUg8Vj0xJfLMV22pEhQbZdUBs3Re3003EJxeEj_TkNCDlSeWnRr2R1nZPfmx-p4BzdOy2UPrilQOmtyOSQvq9SAZ)\n\nExisting Profiles are shown on the left. \n\nTo create a profile, click the Create New button toward the top of the screen, and then choose Profile. Or select an existing one and choose Duplicate, then edit the newly-created copy.\n\n![Duplicating a Profile](../../../.gitbook/assets/image%20%2887%29.png)\n\nTo edit a profile, select it from the list on the left. Its contents will appear in the middle part of the screen. \n\nTo add a new Policy, select the desired Policy from the Link More Policies list on the right, and click the Add button. To remove an existing Policy from the Profile, click on the X to the right of its name.\n\n{% hint style=\"info\" %}\nNote that every Profile **must include one, and only one,** [WAF/IPS Policy](waf-ips-policies.md).\n{% endhint %}\n\n{% hint style=\"info\" %}\n**Within a Profile, the order of Policies does not matter.** When evaluating an incoming request, Reblaze combines the Bypass, Allow, and Deny Rules from all the ACL Policies in the Profile. It evaluates all the Bypass Rules first, then all the Allow Rules, then the Deny Rules.\n{% endhint %}\n\nMost Profile administration will not be possible until the appropriate Policies have been created. Similarly, complete Policy administration will not be possible until there are Rules to add to them.\n\n{% embed url=\"https://youtu.be/IDwNqandLhU\" %}\n\n","lastUpdated":"2025-03-01T09:51:23.008Z","hasImages":true,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/product-walkthrough/security/profiles/security-profile-setup.md"},{"id":32,"path":"reference-information-1/custom-ttl-values.md","content":"---\ndescription: Specifying Time-To-Live values.\n---\n\n# TTL Expression Syntax\n\nThe following table includes a list of TTL expressions: \n\n| Custom expiration syntax examples | Description |\n| :--- | :--- |\n| `30m` | Expires after 30 minutes. |\n| `24h` | Expires after 24 hours. |\n| `5d` | Expires after 5 days. |\n| `1w` | Expires after 1 week. |\n| `3M` | Expires after 3 months \\(3\\*30 days\\). |\n| `1y` | Expires after 1 year \\(365 days\\). |\n| `modified +24h` | Calculate 24 hours since modification time, and set expiration accordingly. |\n\n","lastUpdated":"2025-03-01T09:52:57.867Z","hasImages":false,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/reference-information-1/custom-ttl-values.md"},{"id":26,"path":"product-walkthrough/settings/web-proxy/application-profiles.md","content":"---\ndescription: Settings for security behaviors\n---\n\n# Application Profiles\n\n## Overview\n\nThe Application Profiles tab allows you to set appropriate security behaviors for your web applications. \n\n![Application Profiles View](../../../.gitbook/assets/image%20%2889%29.png)\n\nBefore configuring, ensure that the correct site is selected via the dropdown list at the upper right.\n\nTo add an entry to the list, click on the \"+\" button. To delete an entry, click on the \"Remove\" link next to its name.\n\n{% hint style=\"info\" %}\nAs shown in the above screenshot, the default \\(“/”\\)  profile will always be present. It applies to the entire site, except for those parts of the site that have specific profiles assigned to them.\n{% endhint %}\n\nHere are the fields for each Application Profile.\n\n| Field Name | Description |\n| :--- | :--- |\n| **Label** | The name you have assigned to this particular entry. In the example screenshot, the labels are “Static Content” , “Default,” and “JS CSS\". |\n| **Pattern** | The list of extensions to which this profile will be applied, expressed as PCRE \\(Perl Compatible Regular Expressions\\). An explanation and some examples are here: [Pattern Matching Syntax](../../../reference-information-1/pattern-samples.md).  |\n| **Protect** | When enabled, this tells Reblaze to inspect all requests for the specified destination. This should always be enabled, unless there is a specific reason not to do so.  |\n| **WebSocket** | Enables support for the WebSocket protocol for this resource. |\n| **Cache Mode** | Defines Reblaze’s cache behavior for the resources specified in this profile. Modes are explained here: [Controlling Caching Behavior](../../../using-the-product/how-do-i.../cache-modes.md).  |\n| **Client TTL**  | Custom expiration time for the Client Side cache, in [TTL Expression Syntax](../../../reference-information-1/custom-ttl-values.md). \\(Entries will show as strikethroughs when the Cache Mode is set to an option where the TTL values are ignored.\\) |\n| **CDN TTL** | Custom expiration time for the CDN Side cache, in [TTL Expression Syntax](../../../reference-information-1/custom-ttl-values.md). \\(Entries will show as strikethroughs when the Cache Mode is set to an option where the TTL values are ignored.\\) |\n| **Purge  Content** | Purges the cache and removes its content. See explanation below. |\n\n## Purge Cache\n\nIf you'd like to clear cache on one of your websites on the platform, you can click the \"Purge\" button. Usually, the action takes around 5 minutes. \n\n{% embed url=\"https://youtu.be/4ZpJTpTrKQc\" %}\n\n","lastUpdated":"2025-03-01T09:52:20.301Z","hasImages":true,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/product-walkthrough/settings/web-proxy/application-profiles.md"},{"id":28,"path":"product-walkthrough/settings/web-proxy/web-proxy-general-settings.md","content":"---\ndescription: Web Proxy - General Settings overview.\n---\n\n# General Settings\n\nThis part of the interface allows administration of three categories of settings, for the site that is currently selected at the top of the screen:\n\n1. [Upstream Servers](web-proxy-general-settings.md#upstream-servers)\n2. [Proxy Settings](web-proxy-general-settings.md#proxy-settings)\n3. [Log File Parameters](web-proxy-general-settings.md#log-file-parameters)\n\nAt the bottom, it also provides [the ability to delete the selected site](web-proxy-general-settings.md#site-deletion) from the planet.\n\n## **Upstream Servers**\n\nThis section defines the servers that Reblaze will protect. In other words, these are the servers to which Reblaze will send the \\(legitimate\\) traffic it receives.\n\n![Proxy Settings - Setting Upstream Servers](../../../.gitbook/assets/image%20%28107%29.png)\n\n**Within these settings, you can:**\n\n* Enable and configure load balancing, weighting and distributing traffic across your primary servers. \n* Define backup servers, to which Reblaze will failover your traffic when your primary servers aren’t available. \n* Take servers offline for maintenance by ticking a single box in the interface. \n* Instruct Reblaze to keep individual users connected to the same server throughout their sessions. \n\nAdding and deleting servers from this list is straightforward. To add a server, enter its IP in the “New Server” box and click **Add**, then fill out the rest of the information in the new entry. To delete an existing entry, click on the **Delete** link next to that entry.\n\nThe settings for each server in the list are as follows.\n\n| **Attribute** | **Description**  |\n| :--- | :--- |\n| **Host** | The IP address for each server that Reblaze protects. This can be a normal web server, or it can be a load-balancer. Note that Reblaze also provides load-balancing capabilities in its own right, as seen in the next field. |\n| **Weight** | The relative weight of each server for load-balancing purposes. Reblaze distributes traffic with a round-robin sequence, according to these weights. For example, if two servers are both set to 'weight=1', they will receive equal amounts of traffic. If the first is set to 'weight=3' while the second is set to 'weight=1', the first server will receive three visitors for every single visitor that the second server receives. |\n| **Max Fails** | The maximum number of failed communication attempts that are allowed for this server. Once this number of failures occurs, Reblaze will consider the server to be inactive. If other servers are available, Reblaze will failover the traffic to them. If this was the only  server available, Reblaze will return an error to the client \\(either 504 Timeout, or 502 Bad Gateway\\). |\n| **Fail Timeout** | When a server fails, this is the length of time that Reblaze will wait before trying to send traffic to it again. Example: \"10s\" indicates a fail timeout of 10 seconds. This field uses [TTL Expression Syntax](../../../reference-information-1/custom-ttl-values.md). |\n| **Is Down**   | When this box is checked, Reblaze will not attempt to communicate with this server. This allows you to easily take a server offline for temporary maintenance or some other purpose. |\n| **Is Backup** | When this box is checked, Reblaze will treat this server as a backup. In other words, Reblaze will not attempt to communicate with it unless all the primary servers \\(i.e., those for which this box is not checked\\) are unavailable. |\n| **HTTP Port** | The HTTP port for the server. |\n| **HTTPS Port** | The HTTPS port for the server. |\n\n{% hint style=\"info\" %}\nIn addition to the features described above, Reblaze also has a stickiness capability that is not exposed in this version of the interface. Sometimes an application requires a user to be connected to the same server throughout the session. Reblaze can ensure that this occurs, and can do so using a variety of methods \\(tracking the user by IP address, session cookies, geographic location, and more\\).\n\nThe stickiness feature will be added to the Reblaze interface in a future version. Meanwhile, if you need this capability for your deployment, contact Reblaze support to set it up for you.\n{% endhint %}\n\n## Proxy Settings\n\nThe Proxy Settings parameters define Reblaze’s behavior as a proxy, i.e. how Reblaze passes information back and forth between client and server.\n\n![The Proxy Settings Section](https://lh3.googleusercontent.com/7GFSjwHBY05QNuWjz4BFQvRHBuuBFkNSr64kAEZY824uibEY6u1MdHDVqwNBqsTbZ_pcXoVe8DsX7Ke_RfAqo82ZNemkoYeTp07STyyW7kIy-bRNtcAFNritNO3FgD7Y14luw560)\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align:left\">Setting</th>\n      <th style=\"text-align:left\">Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align:left\"><b>Host Header</b>\n      </td>\n      <td style=\"text-align:left\">Defines whether or not Reblaze will alter the Host field in the request\n        header. The default value (&#x201C;$host&#x201D;) means that Reblaze will\n        not change it; the server will receive the Host field that the client sent.\n        A different string will replace the Host field in the header. For example,\n        if you have multiple domains in your Reblaze planet, you might mandate\n        that all incoming requests have a certain domain in the header, regardless\n        of which domain the client is actually accessing.</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\"><b>Client&#x2019;s IP Header Name  (Upstream Side)</b>\n      </td>\n      <td style=\"text-align:left\">Defines the field name that contains the client&apos;s IP address. Reblaze\n        is a proxy, and it passes incoming client requests to the upstream server.\n        This means that the server will receive request headers which contain Reblaze&apos;s\n        cloud IP address as the &quot;client&quot; IP. This is not useful; almost\n        always, the server will need the IP of the actual client instead. To facilitate\n        server logging, analytics, and so on, Reblaze adds the IP address of the\n        originating client to the headers that it sends to the server. The <b>Client&#x2019;s IP Header Name (Upstream Side)</b> entry\n        allows you to define the name of the field within which this information\n        is passed.</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\"><b>Client&apos;s IP Header Name (Client Side)</b>\n      </td>\n      <td style=\"text-align:left\">Defines one or more header fields within which Reblaze can find the client&apos;s\n        IP address. When Reblaze receives an incoming request from a client, the\n        request will have passed through a load balancer on its way to Reblaze.\n        This means that the header will contain the client&apos;s IP and the load-balancer\n        IP. These two IPs are usually found within the X-Forwarded-For field, which\n        is the default entry for <b>Client&apos;s IP Header Name (Client Side)</b>.\n        In this situation, Reblaze knows how to extract the client IP from this\n        field. In other situations, a different field name might be necessary.\n        For example, if the Reblaze customer is using Akamai CDN, the incoming\n        request will have the client IP in a field named True-Client-IP instead.</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\"><b>Domain Names</b>\n      </td>\n      <td style=\"text-align:left\">The list of domains that Reblaze will protect.</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\"><b>SSL Offload</b>\n      </td>\n      <td style=\"text-align:left\">Reblaze can send web traffic via HTTP instead of HTTPS. This improves\n        server performance, because the server no longer needs to decrypt the traffic.\n        Obviously, this decreases security, and so this setting should usually\n        be disabled. However, under certain circumstances (e.g., when a VPN is\n        established between Reblaze and the servers), it can make sense to enable\n        this.</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\"><b>Connect Timeout</b>\n      </td>\n      <td style=\"text-align:left\">The time (in seconds) for Reblaze to wait, before treating a connection\n        with the upstream server as having failed.</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\"><b>Send Timeouts</b>\n      </td>\n      <td style=\"text-align:left\">The time (in seconds) for Reblaze to wait, before treating an upstream\n        data transfer attempt as having failed.</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\"><b>Read Timeout</b>\n      </td>\n      <td style=\"text-align:left\">The time (in seconds) for Reblaze to wait, before treating a downstream\n        (toward Reblaze) data transfer attempt as having failed.</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\"><b>Mask Headers</b>\n      </td>\n      <td style=\"text-align:left\">\n        <p>Defines the response headers that Reblaze will mask (i.e., remove from\n          the response), preventing them from being exposed to the client.</p>\n        <p></p>\n        <p>For example: a default response header might include information about\n          the server software (e.g. &#x201C;Server: Microsoft-IIS/8.5&#x201D;). This\n          tells an attacker exactly which platform he is targeting, and so he can\n          know which vulnerabilities to exploit. The Mask Headers entry defines all\n          the headers to remove. It can contain multiple values, connected by pipes,\n          with asterisks as wildcards.</p>\n      </td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\"><b>HTTP/HTTPS redirect lines</b>\n        <br />\n      </td>\n      <td style=\"text-align:left\">Used to redirect all requests coming into these ports.</td>\n    </tr>\n  </tbody>\n</table>#### Additional information\n\nThe **Client’s IP Header Name \\(Upstream Side\\)** setting defines how Reblaze passes the client's IP address to the upstream server. In addition to the IP, Reblaze also sends the client's geographic information \\(if it is available\\). The field names are:\n\n| Field name | Description |\n| :--- | :--- |\n| RBZ-GEO-Country | Client's country |\n| RBZ-GEO-CountryCode | Abbreviation of client's country |\n| RBZ-ORG | Client's organization |\n| RBZ-REGION | Client's region |\n\n## Log File Parameters \n\nThe Log Files Parameters enables you to control the contents of the Reblaze-generated traffic logs.\n\n![Log File Parameters](../../../.gitbook/assets/image%20%28100%29.png)\n\n| Log file Parameter | Description  |\n| :--- | :--- |\n| **Challenge Domain** | Defines the domain you want Reblaze to use when setting a challenge cookie. The default value \\(“$host”\\) tells Reblaze to use the domain being accessed by the user.  |\n| **Private Args** | Defines the argument names which contain sensitive data, and therefore will not be saved in log files. Common examples of this are payment details and credit card numbers. |\n\n## Site Deletion\n\nWhen you wish to remove a site from Reblaze, select it in the pulldown list in the upper right of the page. Then, at the bottom of the page, you will find a \\(disabled\\) Delete Site button.\n\n![The Delete Site button with its three checkboxes. ](../../../.gitbook/assets/screenshot-2019-12-24-18.17.49.png)\n\nTo enable the button, check all three boxes next to it. \\(This is a safety measure to prevent accidental site deletions.\\) Once the button is enabled, clicking it will remove the specified site from Reblaze. Note that this action cannot be undone.\n\nBefore deleting a site from Reblaze, you should change your DNS settings to reroute your traffic, and then wait for the changes to propagate. Otherwise, Reblaze will still be receiving traffic, but the traffic will no longer be passed along to your server.\n\n","lastUpdated":"2025-03-01T09:52:37.523Z","hasImages":true,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/product-walkthrough/settings/web-proxy/web-proxy-general-settings.md"},{"id":29,"path":"quick-start-guide.md","content":"---\ndescription: A quick-start guide\n---\n\n# Getting Started\n\n## **Welcome to Reblaze!** \n\nIn this section you'll find a quick setup guide to get your **planet** \\(i.e., your entire Reblaze deployment, containing all its domains and web applications\\) up and running. After completing this section, it's advised to read through the rest of this Manual in order to understand the full capabilities of Reblaze. \n\n{% hint style=\"info\" %}\nReblaze's support team is always available to assist you. At any step of this process, please feel free to [contact us](support.md).\n{% endhint %}\n\nThe flowchart below describes the process we are about to begin: \n\n![](.gitbook/assets/getting-started-with-reblaze-flowchart%20%281%29.png)\n\n## **Login**\n\nThe initial login process is as follows:\n\n1. Go to the link provided by Reblaze.  \n\n   `https://example-console.reblaze.com/`\n\n2. Enter the initial login credentials \\(in lowercase\\), which are: `Username = email`\n3. Password: Click on \"Reset password\" in order to set one.\n4. A link will be sent to the provided email address. Click on that link, and on the page that follows, choose and enter a password for your user account.\n5. You will be redirected to your console’s Login page. Please enter the email address specified above, and the password you just created. Then, next to the field which says “Reblaze Key OTP,” click on the envelope icon. During your initial setup request, you had provided a mobile phone number; that number will now receive an SMS message with an OTP \\(One Time Password\\), which you will enter here.\n6. Click on the Login button.\n\nAfter you login into the system, the first screen you will see is the Dashboard. This is the main screen for the Reblaze UI; once traffic statistics are available, they will be displayed here. \\(The Dashboard screen is described in-depth [here](product-walkthrough/reblaze-traffic/dashboard.md).\\)\n\nBefore the Dashboard can show anything, your Reblaze planet must be set up. This is done in the **Settings -&gt; Planet Overview** section.\n\n## **Planet Overview**\n\nTo add a new web application to Reblaze, you will duplicate the pre-defined default application.\n\n{% hint style=\"info\" %}\nThe Reblaze interface does not offer the ability to create a new site or application from scratch, because this process is complicated and error-prone. Instead, you will duplicate the default application and then edit it as needed.\n{% endhint %}\n\nOnce you choose the right domain for your new application, you'll be redirected automatically to the Web Proxy screen, where configurations are made on the selected application. \n\nThere are two settings to configure, and a third that's optional:\n\n1. Set the IP address of your servers under \"Host\". \n\n![](.gitbook/assets/image%20%2839%29.png)\n\n2. Set the Domain Names of your aliases. \n\n![Setting up Domain Names](.gitbook/assets/image%20%2859%29.png)\n\n3. \\(Optional\\) Add a command line to redirect all HTTP requests to HTTPS. \n\n![Command line to redirect all HTTP requests to HTTPS](.gitbook/assets/image%20%2869%29.png)\n\nBefore proceeding, click on \"Security Profiles\" to check for the default settings. These are recommended by Reblaze for initial operation. Further changes are recommended only after taking a careful look at the section discussing \"Security Profiles\", which you can find [here](product-walkthrough/settings/web-proxy/security-profiles.md). \n\nClick on \"Save Changes\" and \"Publish Changes\" to complete the process.  \n\n{% hint style=\"info\" %}\nThe deployment will not occur until you click \"Publish Changes.\" In general, whenever you work within the Reblaze interface, saving and publishing is always necessary. More information is here: [Saving and Publishing Changes](using-the-product/best-practices/publish-your-changes.md). \n{% endhint %}\n\n{% hint style=\"danger\" %}\n**Don't refresh the page until you get a confirmation that the changes were uploaded to the cloud.** \n{% endhint %}\n\n{% embed url=\"https://youtu.be/TnB1CTlGAi4\" caption=\"Setting up a new site\" %}\n\n{% hint style=\"info\" %}\nThe discussion above was a short introduction to the initial setup of your planet. For a more in-depth discussion of the Planet Overview page and its options, [click here](https://app.gitbook.com/@reblaze-2/s/product-manual/~/drafts/-LwgrUwGW8ZCtoxKBTrI/product-walkthrough/settings/planet-overview).\n{% endhint %}\n\n## Setting up SSL Certificates\n\nAll connections between your server and clients must be encrypted. This requires an SSL Certificate to be installed on the web server. Once a certificate is installed, client browsers can connect via HTTPS instead of HTTP. \n\nWith Reblaze, you can either upload an existing certificate into Reblaze, or you can generate a new one for free through the Let's Encrypt service. \n\n### **Adding an existing SSL Certificate to Reblaze**\n\n1. Add your certificate as explained under [SSL Management](product-walkthrough/settings/ssl-management.md). \n2. Copy the relevant details from the [DNS](product-walkthrough/settings/dns.md) section, and redirect your traffic through Reblaze. \\(DNS setup varies widely depending on your current configuration, and this Manual cannot discuss every permutation. [Contact support](support.md) if you need assistance with this.\\)\n3. Go back to \"Planet Overview\" and publish your changes as explained previously.  \n4. Welcome to Reblaze!\n\n### Generating a new SSL Certificate\n\n1. Copy the relevant details from the [DNS](product-walkthrough/settings/dns.md) section, and redirect your traffic through Reblaze. \\(DNS setup varies widely depending on your current configuration, and this Manual cannot discuss every permutation. [Contact support](support.md) if you need assistance with this.\\)\n2. Create a certificate using the \"Gen Cert\" button in the [Planet Overview](product-walkthrough/settings/planet-overview.md#generates-new-certificate) section \\(see image below\\).\n3. In the Planet Overview section, publish your changes as explained previously.\n4. Welcome to Reblaze!\n\n![Look for &quot;Gen Cert&quot; on the right hand side](.gitbook/assets/image%20%2842%29.png)\n\n{% hint style=\"info\" %}\n**The DNS section doesn't exist for marketplace deployments.** \n{% endhint %}\n\n","lastUpdated":"2025-03-01T09:52:44.490Z","hasImages":true,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/quick-start-guide.md"},{"id":30,"path":"reblaze-checklist.md","content":"---\ndescription: Easy-to-use checklists for starting and testing Reblaze\n---\n\n# Reblaze Setup Checklists\n\n### Overview <a id=\"overview\"></a>\n\nPlease go through these checklists, and verify that their actions have been completed, **both before and after** your traffic is routed through Reblaze. \n\nThere are three checklists below: two for setup, and one for testing.\n\n### Prerequisite\n\nBefore going through the checklists below, you should already have performed the actions listed in [Getting Started](quick-start-guide.md).\n\n### **Configuring your environment** \n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align:left\">Item</th>\n      <th style=\"text-align:left\">Action</th>\n      <th style=\"text-align:left\">More Information</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align:left\">\n        <p>Web Server Firewall</p>\n        <p>&amp; Hosting Firewall</p>\n      </td>\n      <td style=\"text-align:left\">Verify that Reblaze IPs are whitelisted in the firewall.</td>\n      <td style=\"text-align:left\">Also, please ensure that only Reblaze IPs are able to access your web\n        server, i.e. block access for all non-Reblaze IPs. This can be done via\n        a set of rules for your firewall, or via .htaccess files.</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\">Rate Limits</td>\n      <td style=\"text-align:left\">Verify that you&apos;re not using any Rate Limit/QOS rules that apply\n        to Reblaze IPs.</td>\n      <td style=\"text-align:left\">This avoids potential blacklisting of Reblaze, and other availability\n        issues. (If Rate Limits are applied, Reblaze can be misidentified as a\n        DDoS source.)</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\">Website Cache Settings</td>\n      <td style=\"text-align:left\">Ensure that each site/application returns the correct caching instructions.</td>\n      <td\n      style=\"text-align:left\">You can also <a href=\"using-the-product/how-do-i.../cache-modes.md\">control caching behavior through Reblaze</a>,\n        as mentioned below.</td>\n    </tr>\n  </tbody>\n</table>### **Setting up Reblaze** \n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align:left\"><b>Item </b>\n      </th>\n      <th style=\"text-align:left\">Action</th>\n      <th style=\"text-align:left\">More Information</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align:left\">Upstream Server</td>\n      <td style=\"text-align:left\">Verify that the Web Proxy settings for each domain/site are correct. (These\n        settings define where and how Reblaze forwards incoming traffic.)</td>\n      <td\n      style=\"text-align:left\">Defined via <a href=\"product-walkthrough/settings/web-proxy/web-proxy-general-settings.md#upstream-servers\">Upstream Servers</a> and\n        also <a href=\"product-walkthrough/settings/web-proxy/web-proxy-general-settings.md#proxy-settings\">Proxy Settings</a>.</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\">SSL</td>\n      <td style=\"text-align:left\">Verify that your SSL setup (which should have been performed already,\n        as described in <a href=\"quick-start-guide.md#setting-up-ssl-certificates\">Getting Started</a>)\n        is complete before routing traffic to Reblaze. (Note that if you want Reblaze\n        to generate Let&apos;s Encrypt certificates for you, the traffic must be\n        routed to Reblaze before the certificate can be generated.)</td>\n      <td style=\"text-align:left\">You can use pre-existing certificates, or generate new ones via Reblaze.\n        <a\n        href=\"product-walkthrough/settings/ssl-management.md\">More info</a>.</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\">Non- Browser Applications</td>\n      <td style=\"text-align:left\">If your application serves bots or other non-browser clients (e.g., monitoring\n        services, mobile/native applications using an API, etc.), you will need\n        to exempt them from Reblaze&apos;s browser challenges.</td>\n      <td style=\"text-align:left\">\n        <p>Mobile/native applications are exempted by using the <a href=\"using-the-product/reblaze-api-1/mobile-sdk.md\">Mobile SDK</a>.</p>\n        <p></p>\n        <p>For other non-browser clients, you should <a href=\"using-the-product/best-practices/enabling-passive-challenges.md#disabling-active-challenges-optional\">disable Active Challenges</a>. <b>It is highly recommended that you </b>\n          <a\n          href=\"using-the-product/best-practices/enabling-passive-challenges.md\"><b>enable Passive Challenges</b>\n            </a><b> </b>to replace them. More info on the overall challenge process is\n            <a\n            href=\"product-walkthrough/reblaze-traffic/traffic-concepts.md#the-challenge-process\">here</a>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\">HTTPS</td>\n      <td style=\"text-align:left\">Enable traffic via HTTPS.</td>\n      <td style=\"text-align:left\">Make sure that the <a href=\"product-walkthrough/settings/web-proxy/web-proxy-general-settings.md#upstream-servers\">Proxy Settings</a> are\n        configured properly.</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\">Block Known Sources</td>\n      <td style=\"text-align:left\">Define ACL Policies to reject traffic from sources known to be hostile\n        (e.g., IPs, countries, etc.)</td>\n      <td style=\"text-align:left\">This is done with <a href=\"product-walkthrough/security/profiles/\">Security Profiles</a> that\n        include <a href=\"product-walkthrough/security/profiles/acl-policies.md\">ACL Policies</a> with\n        an operation of &quot;Deny&quot;.</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\">Whitelist Known Sources</td>\n      <td style=\"text-align:left\">Exempt specific traffic sources from inspection and filtering.</td>\n      <td\n      style=\"text-align:left\">This is done with <a href=\"product-walkthrough/security/profiles/\">Security Profiles</a> that\n        include <a href=\"product-walkthrough/security/profiles/acl-policies.md\">ACL Policies</a> with\n        an operation of &quot;Allow&quot; or &quot;Bypass&quot;.</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\">Web Application Firewall (WAF)</td>\n      <td style=\"text-align:left\">Review the default <a href=\"product-walkthrough/security/profiles/acl-policies.md\">ACL Policies</a> and\n        <a\n        href=\"product-walkthrough/security/profiles/waf-ips-policies.md\">WAF/IPS Policy</a>, to ensure they meet your needs. Define new ones if\n          necessary.</td>\n      <td style=\"text-align:left\">The Policies are included in one or more <a href=\"product-walkthrough/security/profiles/\">Security Profiles</a>,\n        which are then assigned to appropriate locations within your site <a href=\"product-walkthrough/settings/web-proxy/security-profiles.md\">as explained here</a>.</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\">DDoS Settings (Rate Limits)</td>\n      <td style=\"text-align:left\">Review the <a href=\"product-walkthrough/security/static-rules.md\">global rate limits</a> to\n        ensure they match your site&apos;s capacity. For most use cases, the default\n        settings should work well.</td>\n      <td style=\"text-align:left\">In addition to the general rate limits, it&apos;s also possible to define\n        limits for specific site locations and/or traffic sources. <a href=\"using-the-product/how-do-i.../set-rate-limits.md\">More info about this</a>.</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\">Cache Settings</td>\n      <td style=\"text-align:left\">Review the applications&apos; cache settings in their <a href=\"product-walkthrough/settings/web-proxy/application-profiles.md\">Application Profiles</a>.</td>\n      <td\n      style=\"text-align:left\">Reblaze has a variety of caching options. Its settings are explained\n        <a\n        href=\"using-the-product/how-do-i.../cache-modes.md\">here</a>.</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\">Alerts</td>\n      <td style=\"text-align:left\">Review and customize alerts and notifications according to your needs.</td>\n      <td\n      style=\"text-align:left\"><a href=\"https://app.gitbook.com/@reblaze-2/s/product-manual/~/drafts/-LyOyZcCv0r35mSbCJs1/product-walkthrough/settings/planet-overview#notification-and-alert-settings\">More info about this</a>.</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\">Account</td>\n      <td style=\"text-align:left\">Review your <a href=\"product-walkthrough/settings/account.md\">account settings</a> to\n        ensure they are correct.</td>\n      <td style=\"text-align:left\">Sometimes new customers enter placeholder values at first. Ideally, correct\n        values would be in place by the time Reblaze is active.</td>\n    </tr>\n  </tbody>\n</table>### **Testing your setup** \n\nWhen the following checklist has been completed, you'll be ready to go. \n\n{% hint style=\"info\" %}\nNote: by default, **Reblaze is deployed in** [**Report mode**](product-walkthrough/settings/web-proxy/security-profiles.md#enabling-report-only-mode) for all applications. In this mode, it will not block traffic; it merely reports on the traffic it would have blocked, if that application had been set to Active mode. \n{% endhint %}\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align:left\">Item</th>\n      <th style=\"text-align:left\">What to verify</th>\n      <th style=\"text-align:left\">More Information</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align:left\">Check DNS</td>\n      <td style=\"text-align:left\">\n        <p>Run a DNS query for the website, and validate that the DNS records of\n          the HTTP/S services are pointing to Reblaze CNAME /IPs only.</p>\n        <p></p>\n      </td>\n      <td style=\"text-align:left\">You can use tools such as <a href=\"https://dnschecker.org/\">https://dnschecker.org/</a>.</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\">Test Traffic</td>\n      <td style=\"text-align:left\">Generate traffic to your site, and verify that it is being displayed in\n        the <a href=\"product-walkthrough/reblaze-traffic/dashboard.md\">Dashboard</a>.\n        For more in-depth traffic inspection, you can use the <a href=\"product-walkthrough/reblaze-traffic/view-log.md\">View Log</a>.\n        If SSL traffic is used, use your web browser to validate that the right\n        certificate is being used.</td>\n      <td style=\"text-align:left\">Both the Dashboard and View Log include a Query box to filter their displays.\n        Here&apos;s <a href=\"using-the-product/best-practices/reblaze-filter.md\">how to use the Reblaze Query Box</a>.</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\">Test Non-Browser Clients</td>\n      <td style=\"text-align:left\">If applicable, generate and test traffic from non-browser clients, and\n        verify via the Dashboard that the requests are not blocked/reported.</td>\n      <td\n      style=\"text-align:left\">This is to validate the (optional) settings configured for non-browser\n        clients, as described in the checklist above.</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\">Monitor and Optimize Settings</td>\n      <td style=\"text-align:left\">As traffic is processed by Reblaze, review the Dashboard (and ideally,\n        the View Log) to see the decisions that are being made. Optimize Reblaze\n        until it is performing as expected. Once you are satisfied with Reblaze&apos;s\n        traffic scrubbing, <a href=\"product-walkthrough/settings/web-proxy/security-profiles.md#enabling-report-only-mode\">move your application(s) from Report mode to Active mode</a>.</td>\n      <td\n      style=\"text-align:left\">Reblaze&apos;s logs are a rich source of insights into incoming traffic.\n        Highly recommended reading: <a href=\"using-the-product/best-practices/dealing-with-false-positive.md\">Understanding and Diagnosing Traffic Issues. </a>\n        </td>\n    </tr>\n  </tbody>\n</table>","lastUpdated":"2025-03-01T09:52:53.716Z","hasImages":false,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/reblaze-checklist.md"},{"id":31,"path":"reference-information-1/acronyms.md","content":"---\ndescription: Used in this Product Manual\n---\n\n# Acronyms\n\n| Acronym | Meaning |\n| :--- | :--- |\n| **ACL** | Access Control List |\n| **API** | Application Programming Interface |\n| **ASN** | Autonomous System Number |\n| **AWS** | Amazon Web Services |\n| **BL** | Blacklist |\n| **BQ** | BigQuery |\n| **BQML** | BigQuery Machine Learning |\n| **CA** | Cloud Armor |\n| **CDN** | Content Delivery Network |\n| **FP** | False Positive |\n| **GCP** | Google Cloud Platform |\n| **IPS** | Intrusion Prevention System |\n| **LB** | Load Balancer |\n| **ML** | Machine Learning |\n| **RFC** | Request for Comments |\n| **SIEM** | Security Information and Events Management |\n| **SOC** | Security Operation Center |\n| **TTL** | Time to Live |\n| **VPC** | Virtual Private Cloud |\n| **WAF** | Web Application Firewall |\n| **WL** | Whitelist |\n\n  \n\n\n","lastUpdated":"2025-03-01T09:52:56.960Z","hasImages":false,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/reference-information-1/acronyms.md"},{"id":33,"path":"reference-information-1/pattern-samples.md","content":"---\ndescription: used for specifying matching conditions\n---\n\n# Pattern Matching Syntax\n\nWithin the Reblaze interface, there are several features that require matching conditions to be specified. \n\nThe text boxes accept strings or PCRE \\(Perl Compatible Regular Expressions\\). If you are unsure of PCRE syntax, you can test your expression at sites such as [https://regex101.com](https://regex101.com), which will show you how it will be parsed. \n\nBelow are some examples of syntax for specifying matching patterns.\n\n| Functionality | Syntax | Remarks |\n| :--- | :--- | :--- |\n| Match **/Images/** or **/images/** or **/IMAGES/** | `~* /images/` | Case insensitive, regular expression matching. |\n| Match URLs that ends with **.DOC** or **.PDF** | `~ \\.(DOC|PDF)$` | Case _sensitive_, regular expression matching. |\n| Match URLs that ends with **.gif** or **.jpg** | `~* \\.(gif|jpg)$` | Case _insensitive_, regular expression matching. |\n| Match _exact_ URL, e.g. Root **/** or **/admin** | `= /` or `= /admin` | Searching stops immediately \\(this match is top priority\\). |\n| Match all URLs starting with **/documents/** | `/documents/` | System will continue search for a regular expression match. This will be matched only if none will be found. |\n| Prioritize URLs starting with **/documents/** | `^~ /documents/` | **^~** means - match and halt searching, i.e. regular expressions will not be checked. |\n| Match 'entire site' \\(anything else\\) | `/` | Matches any URL since all begins with \"/\". However, regular expressions and longer entries will take priority. |\n\nA common pattern is for matching all static content. This pattern in full is:\n\n```text\n~* \\.(gcur|htc|aif|aiff|au|avi|bin|bmp|cab|cct|cdf|class|doc|dcr|dtd|exe|flv|gcf|gff|gif|grv|hdml|hqx|ico|ini|jpeg|jpg|js|mov|mp3|nc|pct|pdf|png|ppc|pws|swa|swf|txt|vbs|w32|wav|wbmp|wml|wmlc|wmls|xsd|zip|webp|jxr|hdp|wdp|bz2|map|ttf|ttc|otf|eot|woff|css)$\n```\n\n\n\n","lastUpdated":"2025-03-01T09:52:58.819Z","hasImages":false,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/reference-information-1/pattern-samples.md"},{"id":34,"path":"reference-information-1/reblaze-signatures.md","content":"# Reblaze Signatures\n\n### **Introduction** \n\nThe Reblaze system blocks traffic if it matches configured WAF signatures, exceeds triggering thresholds, matches ACL rules, or violates RFC specifications. When a blocking event occurs, Reblaze reports it according to reference IDs.\n\nThe reference IDs are listed below, categorized into groups according to their description. In some cases, external links are included with more details on the specific type of attack being described.\n\n### **WAF Signatures**\n\n#### Operating System Command Injection \\(OSCI\\)\n\nOSCI attacks are aimed at the operating system. The attacker seeks to manipulate the operation of the system, or to take control completely. For example, an attacker might attempt to get the content of OS files such as /etc/shadow. An OCSI attack can be included in the request headers, arguments, or cookies. More details on this type of attack can be found on the [OWASP website](https://www.owasp.org/index.php/Command_Injection). \n\n**Reblaze reference ID 400000-499999**\n\n#### Remote File Inclusion \\(**RFI\\)**\n\nRFI attacks target applications that allow scripts to be included in files. These attacks are typically used for planting backdoors. [Here's an example of an RFI attack using PHP.](https://www.owasp.org/index.php/PHP_File_Inclusion)\n\n**Reblaze reference ID 300000-399999**\n\n#### Local File Inclusion \\(**LFI\\)** \n\nAn LFI attack is similar to RFI, but it includes one or more local files instead of remote links. The attacker seeks to upload a file to the server. [Read more about LFI](https://www.owasp.org/index.php/Testing_for_Local_File_Inclusion).\n\n**Reblaze reference ID 300000-399999**  \n\n\n#### SQL Injection \\(**SQLi\\)**\n\nThreat actors use SQL injection to attack databases by executing SQL commands. SQLi is a common attack, with many possible ways for attackers to exploit vulnerabilities. [Read more about SQLi.](https://www.owasp.org/index.php/SQL_Injection) \n\n**Reblaze reference ID 1000000-1999999**  \n\n\n#### Cross-Site Scripting \\(**XSS\\)**\n\nXSS attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted sites and applications. [Read more about XSS](https://www.owasp.org/index.php/Cross-site_Scripting_%28XSS%29).\n\n**Reblaze reference ID 2000000-2999999**  \n\n\n#### **Generic Attacks**\n\nMany attacks take advantage of vulnerabilities in the OS or in the targeted application, without falling into one of the more prominent categories. Reblaze classifies them into this “generic” category.\n\n**Reblaze reference ID 3000000-3999999**  \n\n\n#### **RFC2616 rule check violation**\n\nThis signature refers to a violation of HTTP protocol RFC-2616. For example, [the RFC requires requests to contain a content-length header](https://tools.ietf.org/html/rfc2616#section-14.13); a request that does not include one violates the RFC.\n\n**Reblaze reference ID 3000000-3999999**  \n\n\n#### **Known malicious bot**\n\nThis signature refers to the recognition of user-agent headers of known attack tools and applications: for example, the “Grabber” vulnerability scanner. \n\n**Reblaze reference ID 3000000-3999999**\n\n\\*\\*\\*\\*\n\n#### **PHP Eval/Exec**\n\nThis attack is sometimes referred to as Direct Dynamic Code Evaluation. It exploits an application that does not properly validate user inputs. More information can be found at [OWASP here](https://www.owasp.org/index.php/Direct_Dynamic_Code_Evaluation_%28%27Eval_Injection%27%29).  \n****\n\n#### **Over-capacity**\n\nReblaze blocks requests when a capacity threshold is exceeded: for example, the number of requests per second from a single IP. Usually, these thresholds reflect Reblaze’s DDoS protection. However, in some cases, some of this may be coming from the upstream server rather than Reblaze; in this situation, a “by origin” is added to the event description in the logs. \n\n**Reblaze reference ID: None. This block results in HTTP error 503.**  \n\n\n#### **Unrecognised Host Header**\n\nReblaze blocks headers for any site not found in its list of configured sites: for example, a proxy request. \\(This includes IP addresses as well.\\) Only FQDN \\(fully qualified domain names\\) are allowed.\n\n**Reblaze reference ID: None**  \n\n\n#### **Multiple encoding detected**\n\nA common penetration technique is to encode a hostile request multiple times \\(for example, URL encode and base64\\), in an attempt to evade detection and filtering by the WAF or other security measures. [Read more about multiple encoding attacks here](https://www.owasp.org/index.php/Double_Encoding).\n\n**Reblaze reference ID: 8888001**  \n\n\n#### **Challenge**\n\nThis refers to requests that are blocked because they fail Reblaze’s bot/human detection challenges.\n\n#### **Autoban/etc**\n\nThis refers to traffic that is blocked by the application. It does not include categories such as HTTP errors 400, 408 or 500.\n\n#### **ACL-IP**\n\nA blocking event that resulted from an ACL containing an IP or subnet.\n\n#### **ACL-Geo**\n\nA blocking event that resulted from an ACL containing an IP or subnet that matched geographical criteria.\n\n#### **ACL-Anonymizer**\n\nA blocking event that resulted from an ACL containing an IP or subnet that is part of an anonymous proxy provider.\n\n#### **ACL-TOR**\n\nA blocking event that resulted from an ACL containing an IP or subnet found on a list of TOR gateways.\n\n#### **ACL-VPN**\n\nA blocking event that resulted from an ACL containing an IP or subnet known to be used by a VPN provider.\n\n#### **ACL-ASNum**\n\nA blocking event that resulted from an ACL containing an IP or subnet from a specified AS number.\n\n#### **ACL-Cloud** \n\nA blocking event that resulted from an ACL containing an IP or subnet known to be used by a cloud provider. \n\n#### **Method not allowed**\n\nA request was rejected because it contained an HTTP method that the WAF was configured to reject. For example, a common configuration is to accept HEAD, GET, and POST requests, while rejecting all others.\n\n#### **x-denied@acl-custom-sig**\n\nA violator blocked by the ban list \\(via a Dynamic Rule\\).\n\n#### **bypassed@dpi-max-length**\n\nWhen a request’s payload exceeds the configured threshold, the WAF signatures are bypassed. This mechanism ensures that the WAF will not loop forever and consume 100% of the CPU.\n\n### **Rate limit Signatures**\n\n#### **Custom naming**  \n\nThis blocking event occurs when rate limits are triggered. The text is taken from the name of the rule that triggered the event.\n\n#### **IP in rate limit whitelist**\n\nThis message notes that the IP is in the rate limit whitelist ACL.\n\n#### **Org in rate limit whitelist** \n\nThis message notes that this organization’s AS number is in the rate limit whitelist ACL.  \n****\n\n","lastUpdated":"2025-03-01T09:53:01.643Z","hasImages":false,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/reference-information-1/reblaze-signatures.md"},{"id":40,"path":"using-the-product/best-practices/publish-your-changes.md","content":"# Saving and Publishing Your Changes\n\nWhenever you change the configuration of the Reblaze platform, **you must save your changes**, and in almost all cases, **you must publish them to the cloud as well**.\n\n{% hint style=\"warning\" %}\nIf you do not save your changes, they will be lost when you go to a different page within the user interface. You will not be prompted or asked to confirm the abandonment of your changes.\n{% endhint %}\n\n## Saving Changes\n\nThe Reblaze interface has several ways in which to save changes.\n\nIn many places, this button appears on the upper right part of the screen:\n\n![Visible Save Changes button](../../.gitbook/assets/save-changes-1.png)\n\nIn other places, the Save functionality is part of a pull-down menu, which is designated by three vertical dots:\n\n![Save Changes functionality in the pull-down menu](../../.gitbook/assets/save-changes-2.png)\n\nRemember that you must select Save Changes, in whatever format the button is offered, whenever you make any edits within the Reblaze interface.\n\nAlso remember that in almost all cases, Save Changes only saves your changes within your local session. To push them to your planet in the cloud, you must Publish Changes as well.\n\n## Publishing Your Changes\n\nWhen editing [Dynamic Rules](../../product-walkthrough/security/dynamic-rules.md), saving your changes will apply them to your planet.\n\nIn all other cases, after Saving your changes, you will also need to Publish them, which will push everything to the cloud.\n\n{% hint style=\"info\" %}\nRather than trying to remember which activities require publishing and which do not, it is best to get into the habit of always Publishing after Saving.\n{% endhint %}\n\nIn some cases, choosing the Save button will be followed by an immediate prompt to Publish. In other cases, it will not, but Publishing is still required. Again, it is recommended that you adopt the habit of always Publishing after Saving.\n\nPublishing is done on the Planet Overview page, via the button on the upper right. The status of the Publishing process will appear on the bottom right part of the screen.\n\n{% embed url=\"https://www.youtube.com/watch?v=OXlfNyLBh1U&feature=youtu.be\" caption=\"Example of Publishing a new configuration\" %}\n\n","lastUpdated":"2025-03-01T09:53:37.130Z","hasImages":true,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/using-the-product/best-practices/publish-your-changes.md"},{"id":41,"path":"using-the-product/best-practices/reblaze-filter.md","content":"---\ndescription: How to filter results\n---\n\n# Using the Reblaze Query Box\n\n## Introduction\n\nThe Reblaze query command box allows you to query the data in order to present only the records that you want. The structure of a filter is **operator:value**.\n\n![Using the query/filter box to search for blocked XSS attempts](../../.gitbook/assets/screenshot-2020-01-01-14.10.18.png)\n\nFor example, to view only traffic from IP 10.11.12.13:\n\n**`ip:10.11.12.13`**\n\nAn exclamation mark \\(\"!\"\\) can be used with various filters as a \"NOT\" operator. So, to _exclude_ requests from an IP, add \"!\" as a prefix: \n\n**`ip:!10.11.12.13`**\n\nNote that filters can be combined to fine-tune a search, by chaining them with a comma. For example, in order to show all traffic from France that was blocked:\n\n`country:France, is:blocked`\n\n## Building Queries Efficiently\n\n{% hint style=\"info\" %}\n**The fastest way to build query strings is to double-click on labels of existing log entries.** This will add the value of each label as a filter to the query box. When you have constructed the entire query string, click on the search button, or place the cursor into the text field and hit \"Return\" on your keyboard. \n{% endhint %}\n\nFor example, when looking at this entry for a blocked request \\(the IPs have been censored for privacy reasons\\):\n\n![](../../.gitbook/assets/screenshot-2020-01-01-14.57.05%20%281%29.png)\n\nLet's say you wanted to quickly see what other requests produced a 403 error that came in from the United States on a cloud IP. Double-clicking on the \"403\" label, the \"United States\" label, and the \"Cloud\" label builds the query string for you automatically:\n\n![Automatically adding filter parameters to the query box](../../.gitbook/assets/screenshot-2020-01-01-15.00.16.png)\n\nThen select the \"search\" button, or place the cursor within the query box and hit \"Return\" on your keyboard, to process the query.\n\nIn some situations, this technique has limited usefulness. In the example screenshot above, double-clicking on the label beginning with \"XSS\" would add a \\(very\\) long filter string to the query, because that label contains the full script from the injection attempt \\(although the label itself only displays the first few characters in the interface\\).\n\nIf this is what you want \\(perhaps you need to search only for logged requests which contain that exact script\\), then this is effective. But if you wanted to build a more general query, then this is not useful.\n\nA better approach is to choose a representative substring. \n\n{% hint style=\"info\" %}\n**Queries can be based on substrings.** Internally, Reblaze executes a \"contains\" search, so queries will return everything that contains the string that was specified. \n\nIn some situations, you'll want to build queries that produce exact matches. But in many other situations, it's faster just to search for a relevant substring instead. \n{% endhint %}\n\nExamples:\n\n* `reason:XSS` will show all records with \"XSS\" in their reason label.\n* `url:login` will include all URLs that include \"login\".\n* `ip:191` will display all IP addresses containing \"191\".\n\n## Filter Use Cases and Examples\n\n**Regular expressions** can be applied to the filter value to make the search more accurate. The regex matching is done by wrapping the search value with re\\(REGEX here\\). Examples: \n\n`is:re(200|401)`\n\n`ua:re(iOS!iPhone!iPad)`\n\nIf you wish to display login requests with method “POST” which were blocked, but not by the origin \\(upstream server\\): \n\n`url:/login,is:POST,is:blocked,is:!origin.`\n\nThis displays those requests which produced 502-504 error codes:\n\n**`is:re(502|504)`**\n\nThis displays the requests that contain a specific value in an argument:\n\n**`arg_name:text, arg_value:free_text`**\n\n## **Available filters** \n\n| **Name** | **Explanation** |\n| :--- | :--- |\n| **After** | Log records registered after a given date and time. |\n| **Before** | Log records registered before a given date and time. |\n| **arg\\_name** | Search for an argument by name |\n| **arg\\_value** | Search for an argument value  |\n| **asn** | Autonomous System Number for the IP |\n| **city** | Abbreviation for the country. Example: \"US\" for the United States. |\n| **country** | Name of the country |\n| **cookie\\_rbzid** | Reblaze ID cookie value \\(base64\\) |\n| **cookie\\_name** | Search by cookie name |\n| **cookie\\_value** | Search by cookie value |\n| **domain\\_name** | The main domain name in Reblaze \\(not necessarily the actual Host header\\). |\n| **ext** | File extension |\n| **header\\_name** | Name of header |\n| **header\\_value** | Value found in header\\_name |\n| **host** | HTTP Host header: usually, the domain name of the application. |\n| **id** | Reblaze unique request ID. |\n| **ip** | IP address of the web client. |\n| **is** | IS is a special operator that can be used for almost all attributes of a request. It can be used to filter a certain HTTP method, \"flags\" and protocol version. For instance, to get blocked POST requests made by a human, type: is:blocked, is:human, is:post. |\n| **mime** | Multipurpose Internet Mail Extensions |\n| **origin** | The IP address of the origin server. |\n| **path** | The path of the request \\(the URL without the query string part\\). |\n| **proxy** | The IP address of the particular Reblazer server. |\n| **rbzid** | Hash value of Reblaze ID cookie value \\(md5\\). |\n| **reason** | Reason the request was blocked or passed. |\n| **ref** | HTTP referer header. |\n| **sslcipher** | The chosen SSL cipher. |\n| **sslprotocol** | The chosen SSL protocol. |\n| **status** | Response status code \\(regex is acceptable, e.g. \\[45\\]\\d\\d\\). |\n| **ua** | HTTP User Agent header. |\n| **upstream\\_status** | Response status code from upstream servers \\(regex is acceptable, e.g. \\[45\\]\\d\\d\\). |\n| **url** | A substring to search for within the complete URL request line \\(including the query string\\). |\n\n","lastUpdated":"2025-03-01T09:53:42.469Z","hasImages":true,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/using-the-product/best-practices/reblaze-filter.md"},{"id":42,"path":"using-the-product/how-do-i.../README.md","content":"---\ndescription: A task-based FAQ\n---\n\n# How Do I...\n\nThis section answers questions that often arise about using Reblaze.\n\n{% page-ref page=\"ban-unban-and-whitelist-traffic-sources.md\" %}\n\n{% page-ref page=\"bypassing-rate-limits-for-loadtesting.md\" %}\n\n{% page-ref page=\"cache-modes.md\" %}\n\n{% page-ref page=\"filter-by-content.md\" %}\n\n{% page-ref page=\"quickly-blocking-an-attacker.md\" %}\n\n{% page-ref page=\"secure-traffic-from-a-third-party-page.md\" %}\n\n{% page-ref page=\"set-rate-limits.md\" %}\n\n","lastUpdated":"2025-03-01T09:53:48.271Z","hasImages":false,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/using-the-product/how-do-i.../README.md"},{"id":43,"path":"using-the-product/how-do-i.../ban-unban-and-whitelist-traffic-sources.md","content":"# Ban, Unban, and Whitelist Traffic Sources\n\nThe [Quarantine](../../product-walkthrough/security/quarantined.md) section shows a list of traffic sources \\(i.e., sources of incoming requests\\) that are currently banned, blacklisted, and whitelisted. \n\n## How to ban a requestor\n\nA traffic source is banned automatically when it violates a [Dynamic Rule](../../product-walkthrough/security/dynamic-rules.md). You cannot manually ban a requestor.\n\nHowever, you can accomplish the same effect by blacklisting the requestor. [Instructions are here](../../product-walkthrough/security/quarantined.md#blacklist-and-whitelist).\n\n## How to unban a requestor\n\nYou can manually remove a requestor from the Banlist or Blacklist. [Instructions are here](../../product-walkthrough/security/quarantined.md#manual-removal).\n\n## How to whitelist a requestor\n\nWhitelisting a traffic source will make it exempt from Dynamic Rules. [Instructions are here](../../product-walkthrough/security/quarantined.md#blacklist-and-whitelist).\n\n\n\n","lastUpdated":"2025-03-01T09:53:48.912Z","hasImages":false,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/using-the-product/how-do-i.../ban-unban-and-whitelist-traffic-sources.md"},{"id":44,"path":"using-the-product/how-do-i.../bypassing-rate-limits-for-loadtesting.md","content":"# Bypass Rate Limits for Loadtesting\n\nSometimes a customer wishes to \"attack\" an application or server as part of a loadtest. Under normal circumstances, Reblaze would prevent this, because it would enforce rate limits and block the excessive requests from reaching the upstream network.\n\nThe test can be accomplished by creating an [ACL Policy](../../product-walkthrough/security/profiles/acl-policies.md) which allows the source IP \\(or range of IPs\\), then naming that ACL Policy with a suffix of \"OC.\" \\(For example, the ACL Policy might be named \"Loadtest OC.\"\\)\n\nAs discussed in the [Special ACLs](../../product-walkthrough/security/profiles/acl-policies.md#special-acls) section, the \"OC\" suffix means that the IP will not be subjected to normal rate limit testing. This allows that IP to generate a large amount of traffic, which will be passed through upstream without being filtered by Reblaze.\n\n","lastUpdated":"2025-03-01T09:53:50.297Z","hasImages":false,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/using-the-product/how-do-i.../bypassing-rate-limits-for-loadtesting.md"},{"id":45,"path":"using-the-product/how-do-i.../cache-modes.md","content":"---\ndescription: >-\n  as administered in Settings -> Web Proxy -> Application Profiles -> Cache\n  Modes\n---\n\n# Control Caching Behavior\n\nWeb clients can cache resources from a server. Afterwards, a client can access its local cache, which reduces the number of requests sent to the server. \n\nServers can instruct clients to implement caching in certain ways. Servers can also set separate caching policies for any intermediary proxies in-between the server and the client.\n\nReblaze is a proxy between the clients and the **origin** \\(the upstream server\\). When the origin responds to clients, the outgoing responses pass through Reblaze. You can instruct Reblaze to preserve or alter the caching instructions in those responses.\n\nOn the [Application Profiles](../../product-walkthrough/settings/web-proxy/application-profiles.md) page, the **Cache Operation Mode** is where you define Reblaze's caching behavior. There are several aspects to this:\n\n* Whether Reblaze includes caching instructions in the response to the client.\n* If so, whether they are the instructions from the origin server, or if Reblaze should override them and send different instructions instead. \n* Whether Reblaze itself caches the response content.\n\nHere are the Cache Operation Modes and their effects.\n\n| **Cache Operation Mode** | Are caching instructions sent to the client? | Are the instructions the same as the origin's? | Does Reblaze cache  response content? | Comments |\n| :--- | :--- | :--- | :--- | :--- |\n| **Honor Origin** | Yes | Yes | Yes, if the origin says to do so. | Reblaze will comply with the origin, and pass along its caching instructions to the client. |\n| **Active Pipe** | Yes | No | Complies with TTL settings   | Reblaze will generate caching instructions for the client in accordance with the Client TTL and CDN TTL settings in the [Application Profiles](../../product-walkthrough/settings/web-proxy/application-profiles.md#overview) section, and will also comply with them itself. |\n| **Passive Pipe** | Yes | No | No | Reblaze will generate caching instructions for the client in accordance with the Client TTL and CDN TTL settings in the [Application Profiles](../../product-walkthrough/settings/web-proxy/application-profiles.md#overview) section, but will not store anything itself. |\n| **Neutral Pipe** | Yes | Yes | No | Reblaze will pass the origin's caching instructions to the client, without caching anything itself. |\n| **Reset Headers** | No | n/a | No | Reblaze will remove all cache headers sent by the origin, and will send the response to the client without any cache directive. |\n| **No Cache** | Yes | No | No | Reblaze will send no-cache instructions to the client:  `Cache-Control \"max-age=0, no-cache, no-store\"` and`Pragma no-cache.` |\n| **Private** | Yes | No | Complies with TTL settings | Reblaze will generate caching instructions for the client in accordance with the Client TTL and CDN TTL settings in the [Application Profiles](../../product-walkthrough/settings/web-proxy/application-profiles.md#overview) section, and will also comply with them itself. In addition, the client's instructions will include `Cache-Control private` |\n\n","lastUpdated":"2025-03-01T09:53:50.720Z","hasImages":false,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/using-the-product/how-do-i.../cache-modes.md"},{"id":46,"path":"using-the-product/how-do-i.../filter-by-content.md","content":"---\ndescription: Blocking requests that do not conform to content policies\n---\n\n# Filter by Content\n\nThere are several ways to filter requests based on their content.\n\n[Custom Signatures](../../product-walkthrough/security/profiles/acl-policies.md#custom-signature) are a powerful method for specifying content restrictions for traffic. They are included within [ACL Policies](../../product-walkthrough/security/profiles/acl-policies.md), which are used within [Profiles](../../product-walkthrough/security/profiles/), which are assigned to various locations of your site/application at [Settings-&gt;Web Proxy-&gt;Security Profiles](../../product-walkthrough/settings/web-proxy/security-profiles.md).\n\nA more direct method is to [create content filters directly for a location](../../product-walkthrough/settings/web-proxy/security-profiles.md#content-filtering-for-a-location). This too provides powerful filtering capabilities. Here's a comparison between this and Custom Signatures.\n\n* Both can deny requests based on their content.\n* **Location-based filtering makes it easier to** _**require**_ **certain content in incoming requests.**\n* Location-based filtering is simpler when setting up different filters for different locations. \n* Custom Signatures are modular, and once defined, they can be re-used in multiple places throughout the interface. A location-based filter definition cannot do this. Instead, you have to manually define the filtering conditions for each location.\n\n[Dynamic Rules](../../product-walkthrough/security/dynamic-rules.md) can be used to rate-limit a requestor, based on the content that is requested.\n\n[Args Analysis](../../product-walkthrough/security/args-analysis.md) examines the characters found in arguments. Depending on its mode, it can block requests if unexpected characters are found, or pass them on to the WAF for further inspection. It can also act as an inverse content filter; those requests with arguments which contain only whitelisted characters can bypass WAF filtering. \n\n\n\n","lastUpdated":"2025-03-01T09:53:53.851Z","hasImages":false,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/using-the-product/how-do-i.../filter-by-content.md"},{"id":47,"path":"using-the-product/how-do-i.../quickly-blocking-an-attacker.md","content":"# Quickly Block an Attacker\n\nSometimes [ACL Policies](../../product-walkthrough/security/profiles/acl-policies.md) can make it difficult to find and block a specific attacker.\n\nFor example, let's say an ACL Policy \\(named \"Allow US Traffic\"\\) for an ecommerce store allows all traffic originating from the United States. But then an attacker, using an IP within the US, begins to scrape prices and other data from the store. \n\nIf an ACL Policy were added to Deny that IP address, it wouldn't work. The hierarchy of ACL Policy enforcement means that the \"Allow US Traffic\" Policy will take precedence, and the 'Deny' Policy for that IP will never be invoked.\n\nOne way to quickly solve this problem is to add an ACL Policy with a name ending in a suffix of \"XDeny\" \\(for example, \"Block US Scraper XDeny\"\\). As was discussed in the \"[Special ACLs](../../product-walkthrough/security/profiles/acl-policies.md#special-acls)\" section, that suffix moves the ACL Policy to the top of the hierarchy. \n\nTherefore, that ACL Policy will be invoked and enforced for that IP address, and the attacking IP will be blocked, before the \"Allow US Traffic\" Policy has a chance to grant it access.\n\n{% hint style=\"warning\" %}\nLong-term use of this capability is not optimal; using it too frequently can tend to create a collection of ACL policies that is messy, confusing, and difficult to manage. The optimal approach is to use it as a tool for solving a specific problem temporarily, while a robust set of ACL Policies are constructed and tested that will solve the problem correctly. \n{% endhint %}\n\n","lastUpdated":"2025-03-01T09:53:56.259Z","hasImages":false,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/using-the-product/how-do-i.../quickly-blocking-an-attacker.md"},{"id":48,"path":"using-the-product/how-do-i.../secure-traffic-from-a-third-party-page.md","content":"# Secure Traffic from a Third-Party Page\n\nOften, a web application will use external pages. For example, within digital marketing campaigns, it’s common to use landing pages that are provided by a third-party service.\n\nSince these pages are generally hosted by the service provider, they are not directly protected by Reblaze. However, a customer can still use Reblaze to scrub traffic coming from them, and block hostile visitors from affecting the **parent site** \\(i.e., the site/application that is using the third-party service\\). \n\nFor example, bots can stuff false information into landing-page forms and submit it to the parent site. Reblaze cannot prevent the bots from accessing the third-party landing page. However, it can interdict the form submissions, and prevent them from passing through to the parent site.\n\nMost third-party services allow code to be embedded into their pages. The following process takes advantage of this.\n\nAdd the following code to the page \\(ideally and if possible, in the page header\\):\n\n```text\n<iframe src=\"https://www.example.com/pixel-path\" width=\"0\" height=\"0\" style=\"display:none\"></iframe> \n```\n\nExplanation:\n\n* “www.example.com” is your site.  \n* “pixel-path” is a **non-existent path**. In other words, the overall address won’t actually resolve to a page or resource within your site.\n\nThe purpose of this request is not to return a resource or page; it is merely to trigger a call into the parent site. The call will trigger an active challenge. \n\n* **If the visitor is a bot, the challenge will fail.** Subsequent access attempts to the parent site \\(e.g., form submission attempts by a bot\\) will be blocked. \n* **If the visitor is a human, the web browser will receive Reblaze’s authenticating cookies.** Subsequent ****actions by the visitor will include the cookies**,** and will be accepted by Reblaze. \n\n{% hint style=\"warning\" %}\nNote that Reblaze needs to be configured so that active challenges occur on the `pixel-path` URL given above.\n{% endhint %}\n\n","lastUpdated":"2025-03-01T09:53:58.371Z","hasImages":false,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/using-the-product/how-do-i.../secure-traffic-from-a-third-party-page.md"},{"id":49,"path":"using-the-product/how-do-i.../set-rate-limits.md","content":"---\ndescription: Restricting consumption of resources and rate of requests\n---\n\n# Set Rate Limits\n\nDifferent types of rate limits are defined in different parts of the Reblaze interface.\n\n**Global:** The [Static Rules -&gt; Speed & Rate](../../product-walkthrough/security/static-rules.md#speed-and-rate) settings apply to your entire planet.\n\n**By location:** Rate limits for specific locations/URLs can be created by defining the locations within [Web Proxy -&gt; Security Profiles](../../product-walkthrough/settings/web-proxy/security-profiles.md#managing-locations), and selecting \"More\" at the end of each location's entry in the list. See full explanation here: [Setting Rate Limits for a Location](../../product-walkthrough/settings/web-proxy/security-profiles.md#setting-rate-limits-for-a-location). \n\n**By traffic source:** Requestors who are submitting excessive requests can be banned for configured lengths of time. This can be done via [Dynamic Rules](../../product-walkthrough/security/dynamic-rules.md). \n\n## Creating Rate Limiting Exemptions\n\nCreating exemptions from rate limits is done differently, depending on the scope of the rate limits being addressed.\n\n**Global:** Create an [ACL Policy with an OC suffix](../../product-walkthrough/security/profiles/acl-policies.md#special-acls).\n\n**By location:** Create an [ACL Policy](../../product-walkthrough/security/profiles/acl-policies.md) with the name \"**Rate Limit Whitelist**\". This can exempt any combination of IP, Country, and ASN. The Policy should then be included in a [Profile](../../product-walkthrough/security/profiles/), and the Profile should be [assigned](../../product-walkthrough/settings/web-proxy/security-profiles.md#assigning-a-security-profile-to-a-location) to the appropriate location\\(s\\)  or portions of your site/application. Example:\n\n![An ACL with this name will exempt the traffic sources from rate limiting for the specific location](../../.gitbook/assets/rate-limit-whitelist%20%281%29.png)\n\n**By traffic source:** A traffic source can be exempted from Dynamic Rule filtering either by [adding an Ignore parameter to the Rule itself](../../product-walkthrough/security/dynamic-rules.md#dynamic-rule-settings), or by adding the traffic source to the [Whitelist within the Quarantine section](../../product-walkthrough/security/quarantined.md#whitelist).\n\n\n\n\n\n","lastUpdated":"2025-03-01T09:54:04.477Z","hasImages":true,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/using-the-product/how-do-i.../set-rate-limits.md"},{"id":50,"path":"using-the-product/reblaze-api-1/README.md","content":"# Reblaze API\n\nThere are two APIs within Reblaze: the REST API to control the platform programmatically, and the one used internally by the Mobile SDK.\n\n{% page-ref page=\"reblaze-api.md\" %}\n\n{% page-ref page=\"mobile-sdk.md\" %}\n\n\n\n","lastUpdated":"2025-03-01T09:54:06.968Z","hasImages":false,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/using-the-product/reblaze-api-1/README.md"},{"id":51,"path":"using-the-product/reblaze-api-1/mobile-sdk.md","content":"# Mobile SDK\n\n## Introduction\n\nReblaze provides an SDK for use in mobile/native applications, available for both iOS and Android. Customers rebuild and publish their applications with the SDK embedded.\n\nThe Reblaze SDK supports several languages and frameworks:\n\n**Android**:\n\n* Java\n* React Native\n\n**iOS**\n\n* Swift \\(Xcode 11\\)\n* Objective-C \\(Xcode 11\\)\n* React Native\n\nCode samples for each are provided below. \n\nIn the discussion that follows, **customer** will refer to the organization who uses the Reblaze SDK, **client application** will refer to the application in which the SDK is used, and **user** will refer to the end user of the client application.\n\n### Benefits\n\nThe SDK provides client authentication: it signs the application, authenticates the device, and verifies user identity. All communications occur over TLS and include an HMAC signature to harden communications between the application and the microservice/API endpoint. The signatures are non-reproducible, non-guessable, and non-repeating. They provide a reliable, secure mechanism to verify that the packets are originating from a legitimate app user, and not from an emulator or other bot. \n\nThe SDK also sends events to Reblaze:\n\n* **Those generated automatically by the user's interaction** with the client application. \\(An internal thread accumulates events and sends them to Reblaze every 12 seconds.\\) The default events currently gathered by Reblaze are:\n  * for Android: `click, gesture, keydown, keyPress, keyUp, touchDown, touchMove, touchUp`\n  * for iOS: `click, deviceOrientation, gesture, keyDown, keyPress, keyUp, touchDown, touchMove, touchUp`\n* **Optional custom events** generated and sent programmatically by the application. \\(These are added to the same queue that the default events use.\\)\n\nReblaze uses these events to build behavioral profiles for users of the client application. After an initial learning period, Reblaze will understand how legitimate users interact with the application. \n\nSubsequent users who do not conform to these behavioral patterns can be flagged as suspicious and/or **blocked from access to the API endpoint.** \n\nThis provides an additional layer of security, based on private analytics and cumulative user-event data to which threat actors have no access. Thus, it provides an additional form of client authentication that is extremely difficult for threat actors to defeat.\n\n### Sending custom events: Optional, but highly recommended\n\nCustomers can evaluate the types of custom events their applications send programmatically to Reblaze. Each is identified with a string chosen by the customer. Sending more types has the following benefits:\n\n* **Reblaze can construct more sophisticated behavioral profiles**, and thus can enforce more robust security policies. **Example:** a mobile API endpoint is receiving numerous requests for data from a specific IP address. Those requests for data are usually generated by a user interacting with the customer's application in a certain way. **If the customer has coded the application so that all these interactive events are sent to Reblaze, then Reblaze will have learned that these types of data requests should be accompanied by these specific custom events.** A high number of data requests that are _not_ accompanied by these event notifications would indicate that this is not a legitimate user; instead, it is probably an attacker using an emulator. \n* **Reblaze includes all the custom events in its traffic logs.** Thus, customers can view fuller records of all the events being generated by each user.\n\n### **How to sign/authenticate client requests and events**\n\nWhen the application sends events and application data upstream to Reblaze, the calls must include certain authentication arguments. \n\nDuring initialization, the application activates the SDK with some variation of the following call, depending on OS and language. \\(This example is in React Native\\).\n\n```java\nreblaze.start(\n\t\"<YOUR-APP-DOMAIN>\", \n\t\"<YOUR-SECRET>\", \n\t\"<YOUR-USER-KEY-NAME>\",\t\n\t\"<YOUR-USER-KEY-VALUE>\");\n```\n\n{% hint style=\"info\" %}\nThe names above are placeholders. In your code, they should be replaced by actual values.\n{% endhint %}\n\nFor example:\n\n```java\nreblaze.start(\n\t\"https://api.example.com\", \n\t\"abcde09876\", \n\t\"UserName\",\t\n\t\"jsmith@gmail.com\");\n```\n\nThere are four authentication arguments, some of which are also used in other calls to Reblaze. \n\n| Argument | Description |\n| :--- | :--- |\n| YOUR-APP-DOMAIN | URL for the customer's application server. |\n| YOUR-SECRET | Secret value issued to the customer by Reblaze. |\n| YOUR-USER-KEY-NAME | The name of a field that contains a unique value for this user. \\(**Example**: UserName.\\) |\n| YOUR-USER-KEY-VALUE | The value for the field specified above. \\(For example, the user's email address.\\) |\n\nReblaze uses the first two arguments to identify the application. Reblaze protects the customer's API endpoint\\(s\\) using the security rulesets defined for this application, and also based on the behavioral data accumulated for all users of this application.\n\nThe second two arguments identify the individual end user. Reblaze uses this to enforce per-user security rulesets such as dynamic rate limits. These arguments also allow you to observe the activities of individual users within the traffic logs.\n\n## Overview of SDK Usage\n\nTo use the Reblaze SDK, up to six tasks must be done. \\(The various combinations of OS and language/framework require different combinations of tasks.\\) The first and last tasks are at the project level; the remaining tasks are done within your application's code.\n\n* [Installation](mobile-sdk.md#installation) \n* [Initialize/instantiate the SDK](mobile-sdk.md#initialize-instantiate-the-sdk)\n* [Sign your application's requests](mobile-sdk.md#sign-your-applications-requests)\n* [Send custom events](mobile-sdk.md#send-custom-events) ****\\(optional\\)\n* [Destroy/cleanup resources](mobile-sdk.md#destroy-cleanup-resources)\n* [Prepare the project for publishing](mobile-sdk.md#prepare-the-application-for-publishing) \\(iOS only\\)\n\nEach step is explained below. \n\n## Installation\n\n### Android\n\n#### Java\n\nTo install the SDK library into your project, copy the`.arr` file \\(**reblaze-release.arr**\\) from the **app/libs** folder into your project libs folder. \n\nIn your app's Gradle script, in the dependencies section, add the following line:\n\n```java\nimplementation(name:'reblaze-release', ext:'aar')\n```\n\nAlso make sure that the dependencies section includes this:\n\n```java\nimplementation fileTree(dir: 'libs', include: ['*.jar'])\n```\n\n#### React Native\n\nOpen `android/app/src/main/java/[...]/MainActivity.java`\n\n* At the top of the file, add this to the imports: \n\n```java\nimport com.reactlibrary.RNReblazeReactNativeSdkPackage; \n```\n\n* To the list returned by the`getPackages()` method, add this:\n\n```java\nAdd new RNReblazeReactNativeSdkPackage()\n```\n\nAppend the following to `android/settings.gradle`:\n\n```java\ninclude ':reblaze-sdk' project(':react-native-reblaze-react-native-sdk').projectDir = new File( rootProject.projectDir, '../node_modules/react-native-reblaze-react-native-sdk/android')\n```\n\nOpen `android/app/build.gradle`. \n\n* Inside the dependencies block, insert this: \n\n```java\ncompile project(':react-native-reblaze-react-native-sdk') include ':react-native-reblaze-react-native-sdk' project(':react-native-reblaze-react-native-sdk').projectDir = new File( rootProject.projectDir, '../node_modules/react-native-reblaze-react-native-sdk/android')\n```\n\n* Inside the dependencies block, insert this:\n\n```java\ncompile project(':re-sdk')\n```\n\n* Then add this:\n\n```java\nallprojects { repositories { mavenLocal() google() jcenter() maven { // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm url \"$rootDir/../node_modules/react-native/android\" } flatDir { dirs project(':reblaze-sdk').file('reblaze-release') // Reblaze Added line for gradle to find the compiled library } } }\n```\n\nIn the Javascript file `index.js (app)`, add this line :\n\n```java\nAppRegistry.registerComponent('RNReblazeReactNativeSDK', () => App);\n```\n\n### iOS\n\n#### Swift **and Objective C**\n\nFind the **ReblazeSDK.framework** inside the example app folder. Copy/Drag the Universal Framework to this project. While copying the framework in Project Explorer, check “Copy items if needed”.\n\nSelect the Project, and choose `Target → Project Name → Select General` → Scroll to **Embedded Binaries**. Press **+** and Add the framework.\n\n#### React Native\n\n1. Download all files from the repository.\n2. Manually link them as explained here: [https://facebook.github.io/react-native/docs/linking-libraries-ios](https://facebook.github.io/react-native/docs/linking-libraries-ios)\n\n## **Initialize/instantiate the SDK**\n\n### **Android**\n\n#### **Java**\n\n```java\nreblaze.start(this, \n\t\"<YOUR-APP-DOMAIN>\", \n\t\"<YOUR-SECRET>\", \n\t\"<YOUR-USER-KEY-NAME>\",\n\t\"<YOUR-USER-KEY-VALUE>\");\n```\n\nThe `reblaze` class is static, so you can call it from anywhere in the app. The best practice is to make this call within `MainActivity`.\n\n#### React Native\n\n```java\nimport reblaze from 'reblaze-sdk';\n```\n\n```java\nreblaze.start(\n\t\"<YOUR-APP-DOMAIN>\", \n\t\"<YOUR-SECRET>\", \n\t\"<YOUR-USER-KEY-NAME>\",\t\n\t\"<YOUR-USER-KEY-VALUE>\");\n```\n\n### iOS\n\n#### Swift\n\n```java\nimport ReblazeSDK\n```\n\nThis should be in your `AppDelegate` and wherever you want to send a custom event.\n\n```java\nReblaze.start(\n          with: \"<YOUR-APP-DOMAIN>\", \n        secret: \"<YOUR-SECRET>\", \n   header_name: \"<YOUR-USER-KEY-NAME>\", \n  header_value: \"<YOUR-USER-KEY-VALUE>\")\n```\n\nThe `reblaze` class is static, so you can call it from anywhere in the app. The best practice is to make this call within `AppDelegate`.\n\n#### Objective-C\n\n```java\n@import ReblazeSDK;\n```\n\nThis should be in your `AppDelegate` and wherever you want to send a custom event.\n\n```java\n[Reblaze startWith:@\"<YOUR-APP-DOMAIN>\"\n            secret:@\"<YOUR-SECRET>\"\n       header_name:@\"<YOUR-USER-KEY-NAME>\"\n      header_value:@\"<YOUR-USER-KEY-VALUE>\"];\n```\n\n`application:didFinishLaunchingWithOptions` is a good location for this.\n\n#### React Native\n\n```java\nimport reblaze from 'reblaze-sdk';\n```\n\n```java\nreblaze.start(\n\t\"<YOUR-APP-DOMAIN>\", \n\t\"<YOUR-SECRET>\", \n\t\"<YOUR-USER-KEY-NAME>\",\t\n\t\"<YOUR-USER-KEY-VALUE>\");\n```\n\n## **Sign your application's requests**\n\nWhenever your application sends a request upstream to your API endpoint, the request must include three headers for Reblaze to authenticate the client.\n\nThe headers are:\n\n1. `timestamp` : unix/epoch timestamp of the current time \\(seconds since January 1, 1970\\).\n2. the value provided in the `<YOUR-USER-KEY-NAME>` argument\n3. `rbzid` : the signature generated by the Reblaze SDK. This is a string provided by the static method `getHash`. There are slight differences in syntax across languages/frameworks, described below.\n\n{% hint style=\"warning\" %}\nNote that one of the headers is a timestamp, and another is generated from a timestamp. **Both headers must use the same timestamp.** In other words, your code should take a timestamp and save it. Then it should be submitted directly in the first header, and used as the basis for the third header.\n{% endhint %}\n\nHere's an example of obtaining the timestamp using Objective C.\n\n```java\nNSTimeInterval timestamp = [[[NSDate alloc] init] timeIntervalSince1970];\nNSString *hash = [Reblaze getHashWithUnixTimestamp:ceil(timestamp)];\n```\n\n{% hint style=\"warning\" %}\nMake sure that `getHash` is called only **after** `start` or `startWith` is called.\n{% endhint %}\n\n### Android\n\n#### Java\n\n```\nreblaze.getHash(unix_timestamp)\n```\n\n### **iOS**\n\n#### **Swift**\n\n```java\nReblaze.getHash(unixTimestamp: Int)\n```\n\n#### **Objective-C**\n\n```java\n[Reblaze getHashWithUnixTimestamp:<Int>];\n```\n\n## **Send custom events**\n\nThe names of custom events are defined by your application. Whatever strings you choose for them are stored and displayed by Reblaze within the traffic logs.\n\n### Android\n\n#### Java\n\n```java\nreblaze.sendEvent(\"<YOUR-EVENT-NAME-STRING>\")\n```\n\n**React Native**\n\n```java\nreblaze.sendEvent(\"<YOUR-EVENT-NAME-STRING>\");\n```\n\n### **iOS**\n\n#### **Swift** \n\n```java\nReblaze.sendEvent(eventName: \"<YOUR-EVENT-NAME-STRING>\")\n```\n\n#### **Objective C**\n\n```java\n[Reblaze sendEventWithEventName:@\"<YOUR-EVENT-NAME-STRING>\"];\n```\n\n#### **React Native**\n\n```java\nreblaze.sendEvent(\"<YOUR-EVENT-NAME-STRING>\");\n```\n\n\\*\\*\\*\\*\n\n## **Destroy/cleanup resources**\n\nWhen the SDK is instantiated, it spins up a thread to gather and send events and requests to Reblaze. In Java, when the user's session is complete you should terminate the thread.\n\n### Android\n\n#### Java\n\n```java\nreblaze.Destroy()\n```\n\n{% hint style=\"info\" %}\nThe best practice is to place this call within the application's onDestroy\\(\\) method.\n{% endhint %}\n\n#### React Native\n\nCleanup is not necessary.\n\n### iOS\n\n#### **Swift, Objective-C, and** React Native\n\nCleanup is not necessary.\n\n## Prepare the Project for Publishing\n\n{% hint style=\"info\" %}\n**This only applies to iOS applications.** Android applications do not require this step.\n{% endhint %}\n\nBefore publishing an application to the App Store, you must remove unused architectures. This is done by adding the Remove Unused Architectures Script to your project.\n\n**Remove Unused Architectures script**\n\nTake the script shown below. Select the Project, Choose **Target → Project Name → Select Build Phases → Press “+” → New Run Script Phase.  → Name** the  script as **Remove Unused Architectures Script**.\n\n```text\nFRAMEWORK=\"TestFramework\"\nFRAMEWORK_EXECUTABLE_PATH=\"${BUILT_PRODUCTS_DIR}/${FRAMEWORKS_FOLDER_PATH}/$FRAMEWORK.framework/$FRAMEWORK\"\nEXTRACTED_ARCHS=()\n\nfor ARCH in $ARCHS\ndo\n    lipo -extract \"$ARCH\" \"$FRAMEWORK_EXECUTABLE_PATH\" -o \"$FRAMEWORK_EXECUTABLE_PATH-$ARCH\"\n    EXTRACTED_ARCHS+=(\"$FRAMEWORK_EXECUTABLE_PATH-$ARCH\")\ndone\n\nlipo -o \"$FRAMEWORK_EXECUTABLE_PATH-merged\" -create \"${EXTRACTED_ARCHS[@]}\"\nrm \"${EXTRACTED_ARCHS[@]}\"\nrm \"$FRAMEWORK_EXECUTABLE_PATH\"\nmv \"$FRAMEWORK_EXECUTABLE_PATH-merged\" \"$FRAMEWORK_EXECUTABLE_PATH\"\n```\n\nThis will remove unused Simulator architectures while the application is pushed to the App Store.\n\n\n\n\n\n\n\n","lastUpdated":"2025-03-01T09:54:07.342Z","hasImages":false,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/using-the-product/reblaze-api-1/mobile-sdk.md"},{"id":52,"path":"using-the-product/reblaze-api-1/reblaze-api.md","content":"# Reblaze REST API\n\n## **Reblaze REST API operations v2.x**\n\nBelow are listed the available operations under Reblaze's API. The listings include descriptions, and examples using curl over Bash under Ubuntu 18. \n\nThe parameter $HOST refers to the console FQDN, while $KEY refers to the API key.  \n\n### **Operations**\n\n#### **List Sites**\n\nLists all sites that are currently set up on the management console. \n\n| **`curl -s -XGET https://$HOST/api/$KEY/sites/list`** |\n| :--- |\n\n\n#### Duplicate Site\n\nDuplicates/creates new site based on an existing site. You can choose to overwrite the upstream, or use the one that is currently set on the source site. The duplicate site will also create a referring CNAME based on the source site DNS settings.\n\n| **`curl -s -XPOST https://$HOST/api/$KEY/sites/duplicate -d \"canonicalname=src.example.com&newdomain=dst.example.com&upstreamhost=8.8.8.8\"`** |  |\n| :--- | :--- |\n\n\n#### **Remove Site**\n\nRemoves the site from the sites list. This operation also removes the referring CNAME.\n\n| **`curl -s -XGET https://$HOST/api/$KEY/sites/list`** |\n| :--- |\n\n\n#### **Set Names \\( Domain aliases \\)**\n\nSets the domains that a site supports. You can add up to 100 domains per site. A domain can also contain wildcards \\(e.g, \\*.domain.name\\).\n\n| **`curl https://$HOST/api/$KEY/sites/setnames --data \"canonicalname=src.example.com&names=www.example.com,www2.example.com\"`** |\n| :--- |\n\n\n#### **List Upstream**\n\nLists the upstream settings of a site.\n\n| **`curl https://$HOST/api/$KEY/sites/listupstream?canonicalname=www.example.com`** |\n| :--- |\n\n\n#### **Set Upstream**\n\nModifies upstream settings. You can add an upstream, change its state, or modify the upstream address. The upstream is a one-line JSON encoded in base64, as shown below. Parameters are described below the code example.\n\n```java\none_line_json='[\n  {\n    \"http_port\": \"80\",\n    \"https_port\": \"443\",\n    \"weight\": \"1\",\n    \"fail_timeout\": \"10s\",\n    \"monitor_state\": \"0\",\n    \"down\": false,\n    \"host\": \"1.2.3.4\",\n    \"max_fails\": \"1\",\n    \"backup\": false\n  },\n  {\n    \"http_port\": \"80\",\n    \"https_port\": \"443\",\n    \"weight\": \"1\",\n    \"fail_timeout\": \"10s\",\n    \"monitor_state\": \"0\",\n    \"down\": false,\n    \"host\": \"4.3.2.1\",\n    \"max_fails\": \"1\",\n    \"backup\": false\n  }\n]'\n```\n\n| Argument | Description |\n| :--- | :--- |\n| **http\\_port** | Upstream HTTP listening port |\n| **https\\_port** | Upstream HTTPS listening port |\n| **weight** | The relative weight of the upstream for load-balancing purposes within a farm. Reblaze distributes traffic with a round-robin sequence, according to these weights. For example, if two servers are both set to 'weight=1', they will receive equal amounts of traffic. If the first is set to 'weight=3' while the second is set to 'weight=1', the first server will receive three requests for every single request that the second server receives. |\n| **fail\\_timeout** | When a server fails, this is the length of time that Reblaze will wait before trying to send traffic to it again. Example: \"10s\" indicates a fail timeout of 10 seconds. This field uses [TTL Expression Syntax](../../reference-information-1/custom-ttl-values.md). |\n| **max\\_fails** | The maximum number of failed communication attempts that are allowed for this server. Once this number of failures occurs, Reblaze will consider the server to be inactive. If other servers are available, Reblaze will failover the traffic to them. If this was the only server available, Reblaze will return an error to the client \\(either 504 Timeout, or 502 Bad Gateway\\). |\n| **monitor\\_state** | This sets the state for Health Monitoring purposes. \\(This does not specify if the server is up or down; it merely sets the current state as if Health Monitoring had just checked the server and returned that state.\\) If backup is **true**, then this value should be either \"backup\\_active\" or \"backup\\_down\". If backup is **false**, then this should be 0, or \"active\\_down.\" \\(\"active\\_down\" means the server is supposed to be active, but is down instead.\\)  |\n| **down** | The state of the server. |\n| **backup** | If true, Reblaze will treat this server as a backup. In other words, Reblaze will not attempt to communicate with it unless all the primary servers \\(i.e., those for which the Backup setting is not set\\) are unavailable. |\n| **host** | The server host, as IP/FQDN. |\n\n#### **Encode the json with base64**\n\n| **`one_line_json_base64=$( echo $one_line_json | base64 )`** |\n| :--- |\n\n\n#### **Set the Upstreams**\n\n| **`curl https://$HOST/api/$KEY/sites/setupstream --data \"back_hosts=$one_line_json_base64&canonicalname=www.example.com\"`** |\n| :--- |\n\n\n#### **Add Certificate**\n\nAdds a new certificate to the [SSL Management](../../product-walkthrough/settings/ssl-management.md). \n\n| **`curl $API_URL$API_ADD --data-urlencode  \"cert_body=$SSL_CRT\" --data-urlencode \"private_key=$SSL_KEY\" | awk '{print $4}' | cut -d '\"' -f2`** |\n| :--- |\n\n\n#### **Attach Certificate**\n\nAttaches a domain to a SSL certificate.\n\n| **`curl $API_URL$API_ATTACH --data \"canonicalname=$CANONICAL_NAME&sslid=$CERT_ID\"`** |\n| :--- |\n\n\n#### **Detach Certificate**\n\nRemoves an attached domain from SSL. \n\n| **`curl $API_URL$API_DETACH --data \"canonicalname=$CANONICAL_NAME\"`** |\n| :--- |\n\n\n#### **Publish Changes**\n\n| **`curl -XPOST $API_URL$API_PUBLISH`**  |\n| :--- |\n\n\n","lastUpdated":"2025-03-01T09:54:36.987Z","hasImages":false,"githubUrl":"https://github.com/reblaze/gitbook-manual-2x/blob/master/using-the-product/reblaze-api-1/reblaze-api.md"}]}